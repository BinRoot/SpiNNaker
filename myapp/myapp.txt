
myapp.elf:     file format elf32-littlearm
myapp.elf
architecture: armv5te, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x00000e58 memsz 0x00000e58 flags r-x
    LOAD off    0x00010000 vaddr 0x00400000 paddr 0x00400000 align 2**15
         filesz 0x00000000 memsz 0x0000010c flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 RO_DATA       00000e58  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ZI_DATA       0000010c  00400000  00400000  00010000  2**2
                  ALLOC
  2 .comment      00000030  00000000  00000000  00008e58  2**0
                  CONTENTS, READONLY
  3 .ARM.attributes 00000027  00000000  00000000  00008e88  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  RO_DATA	00000000 RO_DATA
00400000 l    d  ZI_DATA	00000000 ZI_DATA
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    df *ABS*	00000000 sark_alib.o
00000001 l       *ABS*	00000000 GNU
00000000 l       *ABS*	00000000 NULL
80000000 l       *ABS*	00000000 BIT_31
00000001 l       *ABS*	00000000 BUF_WRITE
00000012 l       *ABS*	00000000 NUM_CPUS
00000006 l       *ABS*	00000000 NUM_LINKS
00000000 l       *ABS*	00000000 ITCM_BASE
00008000 l       *ABS*	00000000 ITCM_SIZE
00008000 l       *ABS*	00000000 ITCM_TOP
00400000 l       *ABS*	00000000 DTCM_BASE
00010000 l       *ABS*	00000000 DTCM_SIZE
00410000 l       *ABS*	00000000 DTCM_TOP
70000000 l       *ABS*	00000000 SDRAM_BASE_UNBUF
60000000 l       *ABS*	00000000 SDRAM_BASE_BUF
60000000 l       *ABS*	00000000 SDRAM_BASE
08000000 l       *ABS*	00000000 SDRAM_SIZE
68000000 l       *ABS*	00000000 SDRAM_TOP
f5000000 l       *ABS*	00000000 SYSRAM_BASE_UNBUF
e5000000 l       *ABS*	00000000 SYSRAM_BASE_BUF
e5000000 l       *ABS*	00000000 SYSRAM_BASE
00008000 l       *ABS*	00000000 SYSRAM_SIZE
e5008000 l       *ABS*	00000000 SYSRAM_TOP
f6000000 l       *ABS*	00000000 ROM_BASE
00008000 l       *ABS*	00000000 ROM_SIZE
f6008000 l       *ABS*	00000000 ROM_TOP
10000000 l       *ABS*	00000000 CC_BASE_UNBUF
20000000 l       *ABS*	00000000 CC_BASE_BUF
20000000 l       *ABS*	00000000 CC_BASE
00000000 l       *ABS*	00000000 CC_TCR
00000004 l       *ABS*	00000000 CC_TXDATA
00000008 l       *ABS*	00000000 CC_TXKEY
0000000c l       *ABS*	00000000 CC_RSR
00000010 l       *ABS*	00000000 CC_RXDATA
00000014 l       *ABS*	00000000 CC_RXKEY
00000018 l       *ABS*	00000000 CC_SAR
0000001c l       *ABS*	00000000 CC_TEST
11000000 l       *ABS*	00000000 TIMER_BASE_UNBUF
21000000 l       *ABS*	00000000 TIMER_BASE_BUF
21000000 l       *ABS*	00000000 TIMER_BASE
00000020 l       *ABS*	00000000 TIMER_OFFSET
21000000 l       *ABS*	00000000 TIMER1_BASE
21000020 l       *ABS*	00000000 TIMER2_BASE
00000000 l       *ABS*	00000000 TC_LOAD
00000004 l       *ABS*	00000000 TC_COUNT
00000008 l       *ABS*	00000000 TC_CONTROL
0000000c l       *ABS*	00000000 TC_INT_CLR
00000010 l       *ABS*	00000000 TC_RAW_INT
00000014 l       *ABS*	00000000 TC_MASK_INT
00000018 l       *ABS*	00000000 TC_BG_LOAD
00000000 l       *ABS*	00000000 T1_LOAD
00000004 l       *ABS*	00000000 T1_COUNT
00000008 l       *ABS*	00000000 T1_CONTROL
0000000c l       *ABS*	00000000 T1_INT_CLR
00000010 l       *ABS*	00000000 T1_RAW_INT
00000014 l       *ABS*	00000000 T1_MASK_INT
00000018 l       *ABS*	00000000 T1_BG_LOAD
00000020 l       *ABS*	00000000 T2_LOAD
00000024 l       *ABS*	00000000 T2_COUNT
00000028 l       *ABS*	00000000 T2_CONTROL
0000002c l       *ABS*	00000000 T2_INT_CLR
00000030 l       *ABS*	00000000 T2_RAW_INT
00000034 l       *ABS*	00000000 T2_MASK_INT
00000038 l       *ABS*	00000000 T2_BG_LOAD
1f000000 l       *ABS*	00000000 VIC_BASE_UNBUF
2f000000 l       *ABS*	00000000 VIC_BASE_BUF
2f000000 l       *ABS*	00000000 VIC_BASE
00000000 l       *ABS*	00000000 VIC_IRQST
00000004 l       *ABS*	00000000 VIC_FIQST
00000008 l       *ABS*	00000000 VIC_RAW
0000000c l       *ABS*	00000000 VIC_SELECT
00000010 l       *ABS*	00000000 VIC_ENABLE
00000014 l       *ABS*	00000000 VIC_DISABLE
00000018 l       *ABS*	00000000 VIC_SOFT_SET
0000001c l       *ABS*	00000000 VIC_SOFT_CLR
00000020 l       *ABS*	00000000 VIC_PROTECT
00000030 l       *ABS*	00000000 VIC_VADDR
00000034 l       *ABS*	00000000 VIC_DEFADDR
00000100 l       *ABS*	00000000 VIC_ADDR
00000100 l       *ABS*	00000000 VIC_ADDR0
00000104 l       *ABS*	00000000 VIC_ADDR1
00000108 l       *ABS*	00000000 VIC_ADDR2
0000010c l       *ABS*	00000000 VIC_ADDR3
00000110 l       *ABS*	00000000 VIC_ADDR4
00000114 l       *ABS*	00000000 VIC_ADDR5
00000118 l       *ABS*	00000000 VIC_ADDR6
0000011c l       *ABS*	00000000 VIC_ADDR7
00000120 l       *ABS*	00000000 VIC_ADDR8
00000124 l       *ABS*	00000000 VIC_ADDR9
00000128 l       *ABS*	00000000 VIC_ADDR10
0000012c l       *ABS*	00000000 VIC_ADDR11
00000130 l       *ABS*	00000000 VIC_ADDR12
00000134 l       *ABS*	00000000 VIC_ADDR13
00000138 l       *ABS*	00000000 VIC_ADDR14
0000013c l       *ABS*	00000000 VIC_ADDR15
00000200 l       *ABS*	00000000 VIC_CNTL
00000200 l       *ABS*	00000000 VIC_CNTL0
00000204 l       *ABS*	00000000 VIC_CNTL1
00000208 l       *ABS*	00000000 VIC_CNTL2
0000020c l       *ABS*	00000000 VIC_CNTL3
00000210 l       *ABS*	00000000 VIC_CNTL4
00000214 l       *ABS*	00000000 VIC_CNTL5
00000218 l       *ABS*	00000000 VIC_CNTL6
0000021c l       *ABS*	00000000 VIC_CNTL7
00000220 l       *ABS*	00000000 VIC_CNTL8
00000224 l       *ABS*	00000000 VIC_CNTL9
00000228 l       *ABS*	00000000 VIC_CNTL10
0000022c l       *ABS*	00000000 VIC_CNTL11
00000230 l       *ABS*	00000000 VIC_CNTL12
00000234 l       *ABS*	00000000 VIC_CNTL13
00000238 l       *ABS*	00000000 VIC_CNTL14
0000023c l       *ABS*	00000000 VIC_CNTL15
00000000 l       *ABS*	00000000 WDOG_INT
00000001 l       *ABS*	00000000 SOFTWARE_INT
00000002 l       *ABS*	00000000 COMM_RX_INT
00000003 l       *ABS*	00000000 COMM_TX_INT
00000004 l       *ABS*	00000000 TIMER1_INT
00000005 l       *ABS*	00000000 TIMER2_INT
00000006 l       *ABS*	00000000 CC_RDY_INT
00000007 l       *ABS*	00000000 CC_RPE_INT
00000008 l       *ABS*	00000000 CC_RFE_INT
00000009 l       *ABS*	00000000 CC_TFL_INT
0000000a l       *ABS*	00000000 CC_TOV_INT
0000000b l       *ABS*	00000000 CC_TMT_INT
0000000c l       *ABS*	00000000 DMA_DONE_INT
0000000d l       *ABS*	00000000 DMA_ERR_INT
0000000e l       *ABS*	00000000 DMA_TO_INT
0000000f l       *ABS*	00000000 RTR_DIAG_INT
00000010 l       *ABS*	00000000 RTR_DUMP_INT
00000011 l       *ABS*	00000000 RTR_ERR_INT
00000012 l       *ABS*	00000000 CPU_INT
00000013 l       *ABS*	00000000 ETH_TX_INT
00000014 l       *ABS*	00000000 ETH_RX_INT
00000015 l       *ABS*	00000000 ETH_PHY_INT
00000016 l       *ABS*	00000000 SLOW_CLK_INT
00000017 l       *ABS*	00000000 CC_TNF_INT
00000018 l       *ABS*	00000000 CC_MC_INT
00000019 l       *ABS*	00000000 CC_P2P_INT
0000001a l       *ABS*	00000000 CC_NN_INT
0000001b l       *ABS*	00000000 CC_FR_INT
0000001c l       *ABS*	00000000 INT0_INT
0000001d l       *ABS*	00000000 INT1_INT
0000001e l       *ABS*	00000000 GPIO8_INT
0000001f l       *ABS*	00000000 GPIO9_INT
30000000 l       *ABS*	00000000 DMA_BASE_UNBUF
40000000 l       *ABS*	00000000 DMA_BASE_BUF
40000000 l       *ABS*	00000000 DMA_BASE
00000004 l       *ABS*	00000000 DMA_ADRS
00000008 l       *ABS*	00000000 DMA_ADRT
0000000c l       *ABS*	00000000 DMA_DESC
00000010 l       *ABS*	00000000 DMA_CTRL
00000014 l       *ABS*	00000000 DMA_STAT
00000018 l       *ABS*	00000000 DMA_GCTL
0000001c l       *ABS*	00000000 DMA_CRCC
00000020 l       *ABS*	00000000 DMA_CRCR
00000024 l       *ABS*	00000000 DMA_TMTV
00000028 l       *ABS*	00000000 DMA_SCTL
00000040 l       *ABS*	00000000 DMA_STAT0
00000044 l       *ABS*	00000000 DMA_STAT1
00000048 l       *ABS*	00000000 DMA_STAT2
0000004c l       *ABS*	00000000 DMA_STAT3
00000050 l       *ABS*	00000000 DMA_STAT4
00000054 l       *ABS*	00000000 DMA_STAT5
00000058 l       *ABS*	00000000 DMA_STAT6
0000005c l       *ABS*	00000000 DMA_STAT7
00000104 l       *ABS*	00000000 DMA_AD2S
00000108 l       *ABS*	00000000 DMA_AD2T
0000010c l       *ABS*	00000000 DMA_DES2
00000180 l       *ABS*	00000000 DMA_CRCT
f0000000 l       *ABS*	00000000 PL340_BASE_UNBUF
e0000000 l       *ABS*	00000000 PL340_BASE_BUF
e0000000 l       *ABS*	00000000 PL340_BASE
00000000 l       *ABS*	00000000 MC_STAT
00000004 l       *ABS*	00000000 MC_CMD
00000008 l       *ABS*	00000000 MC_DIRC
0000000c l       *ABS*	00000000 MC_MCFG
00000010 l       *ABS*	00000000 MC_REFP
00000014 l       *ABS*	00000000 MC_CASL
00000018 l       *ABS*	00000000 MC_DQSS
0000001c l       *ABS*	00000000 MC_MRD
00000020 l       *ABS*	00000000 MC_RAS
00000024 l       *ABS*	00000000 MC_RC
00000028 l       *ABS*	00000000 MC_RCD
0000002c l       *ABS*	00000000 MC_RFC
00000030 l       *ABS*	00000000 MC_RP
00000034 l       *ABS*	00000000 MC_RRD
00000038 l       *ABS*	00000000 MC_WR
0000003c l       *ABS*	00000000 MC_WTR
00000040 l       *ABS*	00000000 MC_XP
00000044 l       *ABS*	00000000 MC_XSR
00000048 l       *ABS*	00000000 MC_ESR
0000004c l       *ABS*	00000000 MC_MCFG2
00000050 l       *ABS*	00000000 MC_MCFG3
00000100 l       *ABS*	00000000 MC_QOS0
00000104 l       *ABS*	00000000 MC_QOS1
00000108 l       *ABS*	00000000 MC_QOS2
0000010c l       *ABS*	00000000 MC_QOS3
00000110 l       *ABS*	00000000 MC_QOS4
00000114 l       *ABS*	00000000 MC_QOS5
00000118 l       *ABS*	00000000 MC_QOS6
0000011c l       *ABS*	00000000 MC_QOS7
00000120 l       *ABS*	00000000 MC_QOS8
00000124 l       *ABS*	00000000 MC_QOS9
00000128 l       *ABS*	00000000 MC_QOS10
0000012c l       *ABS*	00000000 MC_QOS11
00000130 l       *ABS*	00000000 MC_QOS12
00000134 l       *ABS*	00000000 MC_QOS13
00000138 l       *ABS*	00000000 MC_QOS14
0000013c l       *ABS*	00000000 MC_QOS15
00000200 l       *ABS*	00000000 MC_CCFG0
00000204 l       *ABS*	00000000 MC_CCFG1
00000208 l       *ABS*	00000000 MC_CCFG2
0000020c l       *ABS*	00000000 MC_CCFG3
00000300 l       *ABS*	00000000 DLL_STATUS
00000304 l       *ABS*	00000000 DLL_CONFIG0
00000308 l       *ABS*	00000000 DLL_CONFIG1
f1000000 l       *ABS*	00000000 RTR_BASE_UNBUF
e1000000 l       *ABS*	00000000 RTR_BASE_BUF
e1000000 l       *ABS*	00000000 RTR_BASE
00000000 l       *ABS*	00000000 RTR_CONTROL
00000004 l       *ABS*	00000000 RTR_STATUS
00000008 l       *ABS*	00000000 RTR_EHDR
0000000c l       *ABS*	00000000 RTR_EKEY
00000010 l       *ABS*	00000000 RTR_EDAT
00000014 l       *ABS*	00000000 RTR_ESTAT
00000018 l       *ABS*	00000000 RTR_DHDR
0000001c l       *ABS*	00000000 RTR_DKEY
00000020 l       *ABS*	00000000 RTR_DDAT
00000024 l       *ABS*	00000000 RTR_DLINK
00000028 l       *ABS*	00000000 RTR_DSTAT
0000002c l       *ABS*	00000000 RTR_DGEN
00000200 l       *ABS*	00000000 RTR_DGF0
00000204 l       *ABS*	00000000 RTR_DGF1
00000208 l       *ABS*	00000000 RTR_DGF2
0000020c l       *ABS*	00000000 RTR_DGF3
00000210 l       *ABS*	00000000 RTR_DGF4
00000214 l       *ABS*	00000000 RTR_DGF5
00000218 l       *ABS*	00000000 RTR_DGF6
0000021c l       *ABS*	00000000 RTR_DGF7
00000220 l       *ABS*	00000000 RTR_DGF8
00000224 l       *ABS*	00000000 RTR_DGF9
00000228 l       *ABS*	00000000 RTR_DGF10
0000022c l       *ABS*	00000000 RTR_DGF11
00000230 l       *ABS*	00000000 RTR_DGF12
00000234 l       *ABS*	00000000 RTR_DGF13
00000238 l       *ABS*	00000000 RTR_DGF14
0000023c l       *ABS*	00000000 RTR_DGF15
00000300 l       *ABS*	00000000 RTR_DGC0
00000304 l       *ABS*	00000000 RTR_DGC1
00000308 l       *ABS*	00000000 RTR_DGC2
0000030c l       *ABS*	00000000 RTR_DGC3
00000310 l       *ABS*	00000000 RTR_DGC4
00000314 l       *ABS*	00000000 RTR_DGC5
00000318 l       *ABS*	00000000 RTR_DGC6
0000031c l       *ABS*	00000000 RTR_DGC7
00000320 l       *ABS*	00000000 RTR_DGC8
00000324 l       *ABS*	00000000 RTR_DGC9
00000328 l       *ABS*	00000000 RTR_DGC10
0000032c l       *ABS*	00000000 RTR_DGC11
00000330 l       *ABS*	00000000 RTR_DGC12
00000334 l       *ABS*	00000000 RTR_DGC13
00000338 l       *ABS*	00000000 RTR_DGC14
0000033c l       *ABS*	00000000 RTR_DGC15
00000f00 l       *ABS*	00000000 RTR_TST1
00000f04 l       *ABS*	00000000 RTR_TST2
00002000 l       *ABS*	00000000 P2P_TABLE_SIZE
00000400 l       *ABS*	00000000 MC_TABLE_SIZE
00000018 l       *ABS*	00000000 MC_RAM_WIDTH
00ffffff l       *ABS*	00000000 MC_RAM_MASK
00000008 l       *ABS*	00000000 P2P_EPW
00000003 l       *ABS*	00000000 P2P_LOG_EPW
00000007 l       *ABS*	00000000 P2P_EMASK
00000003 l       *ABS*	00000000 P2P_BPE
00000007 l       *ABS*	00000000 P2P_BMASK
00db6db6 l       *ABS*	00000000 P2P_INIT
e1004000 l       *ABS*	00000000 RTR_MCRAM_BASE
e1005000 l       *ABS*	00000000 RTR_MCRAM_TOP
e1008000 l       *ABS*	00000000 RTR_MCKEY_BASE
e1009000 l       *ABS*	00000000 RTR_MCKEY_TOP
e100c000 l       *ABS*	00000000 RTR_MCMASK_BASE
e100d000 l       *ABS*	00000000 RTR_MCMASK_TOP
e1010000 l       *ABS*	00000000 RTR_P2P_BASE
e1018000 l       *ABS*	00000000 RTR_P2P_TOP
00000020 l       *ABS*	00000000 MC_CAM_WIDTH
f2000000 l       *ABS*	00000000 SYSCTL_BASE_UNBUF
e2000000 l       *ABS*	00000000 SYSCTL_BASE_BUF
e2000000 l       *ABS*	00000000 SYSCTL_BASE
5ec00000 l       *ABS*	00000000 SC_CODE
59111012 l       *ABS*	00000000 CHIP_ID_CODE
00000000 l       *ABS*	00000000 SC_CHIP_ID
00000004 l       *ABS*	00000000 SC_CPU_DIS
00000008 l       *ABS*	00000000 SC_SET_IRQ
0000000c l       *ABS*	00000000 SC_CLR_IRQ
00000010 l       *ABS*	00000000 SC_SET_OK
00000010 l       *ABS*	00000000 SC_CPU_OK
00000014 l       *ABS*	00000000 SC_CLR_OK
00000018 l       *ABS*	00000000 SC_SOFT_RST_L
0000001c l       *ABS*	00000000 SC_HARD_RST_L
00000020 l       *ABS*	00000000 SC_SUBS_RST_L
00000024 l       *ABS*	00000000 SC_SOFT_RST_P
00000028 l       *ABS*	00000000 SC_HARD_RST_P
0000002c l       *ABS*	00000000 SC_SUBS_RST_P
00000030 l       *ABS*	00000000 SC_RST_CODE
00000034 l       *ABS*	00000000 SC_MON_ID
00000038 l       *ABS*	00000000 SC_MISC_CTRL
0000003c l       *ABS*	00000000 GPIO_RES
00000040 l       *ABS*	00000000 GPIO_PORT
00000044 l       *ABS*	00000000 GPIO_DIR
00000048 l       *ABS*	00000000 GPIO_SET
0000004c l       *ABS*	00000000 GPIO_CLR
00000048 l       *ABS*	00000000 GPIO_READ
00000050 l       *ABS*	00000000 SC_PLL1
00000054 l       *ABS*	00000000 SC_PLL2
00000058 l       *ABS*	00000000 SC_FLAG
00000058 l       *ABS*	00000000 SC_SETFLAG
0000005c l       *ABS*	00000000 SC_CLRFLAG
00000060 l       *ABS*	00000000 SC_CLKMUX
00000064 l       *ABS*	00000000 SC_SLEEP
00000068 l       *ABS*	00000000 SC_TS0
0000006c l       *ABS*	00000000 SC_TS1
00000070 l       *ABS*	00000000 SC_TS2
00000080 l       *ABS*	00000000 SC_ARB0
00000100 l       *ABS*	00000000 SC_TAS0
00000180 l       *ABS*	00000000 SC_TAC0
00000200 l       *ABS*	00000000 SC_LINK_DIS
00000000 l       *ABS*	00000000 RST_POR
00000001 l       *ABS*	00000000 RST_WDT
00000002 l       *ABS*	00000000 RST_USER
00000003 l       *ABS*	00000000 RST_SW
00000004 l       *ABS*	00000000 RST_WDI
f3000000 l       *ABS*	00000000 WDOG_BASE_UNBUF
e3000000 l       *ABS*	00000000 WDOG_BASE_BUF
e3000000 l       *ABS*	00000000 WDOG_BASE
00000000 l       *ABS*	00000000 WD_LOAD
00000004 l       *ABS*	00000000 WD_COUNT
00000008 l       *ABS*	00000000 WD_CTRL
0000000c l       *ABS*	00000000 WD_INTCLR
00000010 l       *ABS*	00000000 WD_RAWINT
00000014 l       *ABS*	00000000 WD_MSKINT
00000c00 l       *ABS*	00000000 WD_LOCK
1acce551 l       *ABS*	00000000 WD_CODE
00000001 l       *ABS*	00000000 WD_INT_B
00000002 l       *ABS*	00000000 WD_RST_B
f4000000 l       *ABS*	00000000 ETH_BASE_UNBUF
e4000000 l       *ABS*	00000000 ETH_BASE_BUF
e4000000 l       *ABS*	00000000 ETH_BASE
e4000000 l       *ABS*	00000000 ETH_TX_BASE
00000600 l       *ABS*	00000000 ETH_TX_SIZE
e4000600 l       *ABS*	00000000 ETH_TX_TOP
e4004000 l       *ABS*	00000000 ETH_RX_BASE
00000c00 l       *ABS*	00000000 ETH_RX_SIZE
e4004c00 l       *ABS*	00000000 ETH_RX_TOP
e4008000 l       *ABS*	00000000 ETH_RX_DESC_RAM
e400c000 l       *ABS*	00000000 ETH_REGS
00000000 l       *ABS*	00000000 ETH_CONTROL
00000004 l       *ABS*	00000000 ETH_STATUS
00000008 l       *ABS*	00000000 ETH_TX_LEN
0000000c l       *ABS*	00000000 ETH_TX_CMD
00000010 l       *ABS*	00000000 ETH_RX_CMD
00000014 l       *ABS*	00000000 ETH_MAC_LO
00000018 l       *ABS*	00000000 ETH_MAC_HI
0000001c l       *ABS*	00000000 ETH_PHY_CTRL
00000020 l       *ABS*	00000000 ETH_INT_CLR
00000024 l       *ABS*	00000000 ETH_RX_BUF_RP
0000002c l       *ABS*	00000000 ETH_RX_DESC_RP
00000001 l       *ABS*	00000000 ETH_TX_CLR
00000010 l       *ABS*	00000000 ETH_RX_CLR
00000001 l       *ABS*	00000000 PHY_CTRL_NRST
00000002 l       *ABS*	00000000 PHY_CTRL_DIN
00000004 l       *ABS*	00000000 PHY_CTRL_DOUT
00000008 l       *ABS*	00000000 PHY_CTRL_OE
00000010 l       *ABS*	00000000 PHY_CTRL_CLK
00000000 l       *ABS*	00000000 PKT_MC
00400000 l       *ABS*	00000000 PKT_P2P
00800000 l       *ABS*	00000000 PKT_NN
00a00000 l       *ABS*	00000000 PKT_NND
00c00000 l       *ABS*	00000000 PKT_FR
00020000 l       *ABS*	00000000 PKT_PL
00020000 l       *ABS*	00000000 PKT_MC_PL
00420000 l       *ABS*	00000000 PKT_P2P_PL
00820000 l       *ABS*	00000000 PKT_NN_PL
00c20000 l       *ABS*	00000000 PKT_FR_PL
0000000a l       *ABS*	00000000 CLK_XTAL_MHZ
0007011a l       *ABS*	00000000 PLL_260
0007011e l       *ABS*	00000000 PLL_300
00070121 l       *ABS*	00000000 PLL_330
00070128 l       *ABS*	00000000 PLL_400
00000050 l       *ABS*	00000000 PLL_LOCK_TIME
809488a5 l       *ABS*	00000000 PLL_CLK_SEL
00000020 l       *ABS*	00000000 SERIAL_NCS
00000010 l       *ABS*	00000000 SERIAL_CLK
00000008 l       *ABS*	00000000 SERIAL_SI
00000004 l       *ABS*	00000000 SERIAL_SO
00000038 l       *ABS*	00000000 SERIAL_OE
80000000 l       *ABS*	00000000 SDRAM_TQ
40000000 l       *ABS*	00000000 SDRAM_DPD
20000000 l       *ABS*	00000000 SDRAM_HERE
00000001 l       *ABS*	00000000 LED_0
00000010 l       *ABS*	00000000 MODE_USER
00000011 l       *ABS*	00000000 MODE_FIQ
00000012 l       *ABS*	00000000 MODE_IRQ
00000013 l       *ABS*	00000000 MODE_SVC
00000017 l       *ABS*	00000000 MODE_ABT
0000001b l       *ABS*	00000000 MODE_UND
0000001f l       *ABS*	00000000 MODE_SYS
00000020 l       *ABS*	00000000 THUMB_BIT
00000080 l       *ABS*	00000000 IMASK_IRQ
00000040 l       *ABS*	00000000 IMASK_FIQ
000000c0 l       *ABS*	00000000 IMASK_ALL
00000001 l       *ABS*	00000000 SARK_EVENT
00000060 l       *ABS*	00000000 SVC_STACK
00000040 l       *ABS*	00000000 IRQ_STACK
00000040 l       *ABS*	00000000 FIQ_STACK
00000120 l       *ABS*	00000000 SYS_STACK
00000004 l       *ABS*	00000000 NUM_SDP_MSGS
0000000f l       *ABS*	00000000 SARK_SLOT
00000010 l       *ABS*	00000000 INIT_EVENTS
deaddead l       *ABS*	00000000 DEAD_WORD
00000001 l       *ABS*	00000000 APLX_ACOPY
00000002 l       *ABS*	00000000 APLX_RCOPY
00000003 l       *ABS*	00000000 APLX_FILL
00000004 l       *ABS*	00000000 APLX_EXEC
000000ff l       *ABS*	00000000 APLX_END
00000010 l       *ABS*	00000000 APLX_ENTRY_SIZE
00000040 l       *ABS*	00000000 APLX_BUF_SIZE
00007fc0 l       *ABS*	00000000 APLX_BUFFER
000000ff l       *ABS*	00000000 TAG_NONE
00000000 l       *ABS*	00000000 TAG_HOST
00000001 l       *ABS*	00000000 RTR_ALLOC_FIRST
00000400 l       *ABS*	00000000 RTR_ALLOC_LAST
000003ff l       *ABS*	00000000 RTR_ALLOC_MAX
00000001 l       *ABS*	00000000 ALLOC_LOCK
00000002 l       *ABS*	00000000 ALLOC_ID
00000005 l       *ABS*	00000000 A_LOCK_SEMA
00000001 l       *ABS*	00000000 A_RTE_RESET
00000002 l       *ABS*	00000000 A_RTE_UNDEF
00000003 l       *ABS*	00000000 A_RTE_SVC
00000004 l       *ABS*	00000000 A_RTE_PABT
00000005 l       *ABS*	00000000 A_RTE_DABT
00000006 l       *ABS*	00000000 A_RTE_IRQ
00000007 l       *ABS*	00000000 A_RTE_FIQ
00000008 l       *ABS*	00000000 A_RTE_VIC
00000002 l       *ABS*	00000000 A_STATE_RTE
00000006 l       *ABS*	00000000 EVENT_COUNT
00000000 l       *ABS*	00000000 CMD_VER
00000001 l       *ABS*	00000000 CMD_RUN
00000002 l       *ABS*	00000000 CMD_READ
00000003 l       *ABS*	00000000 CMD_WRITE
00000004 l       *ABS*	00000000 CMD_APLX
00000005 l       *ABS*	00000000 CMD_FILL
00000010 l       *ABS*	00000000 CMD_REMAP
00000011 l       *ABS*	00000000 CMD_LINK_READ
00000012 l       *ABS*	00000000 CMD_LINK_WRITE
00000013 l       *ABS*	00000000 CMD_AR
00000014 l       *ABS*	00000000 CMD_NNP
00000015 l       *ABS*	00000000 CMD_P2PC
00000016 l       *ABS*	00000000 CMD_SIG
00000017 l       *ABS*	00000000 CMD_FFD
00000018 l       *ABS*	00000000 CMD_AS
00000019 l       *ABS*	00000000 CMD_LED
0000001a l       *ABS*	00000000 CMD_IPTAG
0000001b l       *ABS*	00000000 CMD_SROM
0000001c l       *ABS*	00000000 CMD_ALLOC
0000001d l       *ABS*	00000000 CMD_RTR
00000040 l       *ABS*	00000000 CMD_TUBE
00000080 l       *ABS*	00000000 RC_OK
00000081 l       *ABS*	00000000 RC_LEN
00000082 l       *ABS*	00000000 RC_SUM
00000083 l       *ABS*	00000000 RC_CMD
00000084 l       *ABS*	00000000 RC_ARG
00000085 l       *ABS*	00000000 RC_PORT
00000086 l       *ABS*	00000000 RC_TIMEOUT
00000087 l       *ABS*	00000000 RC_ROUTE
00000088 l       *ABS*	00000000 RC_CPU
00000089 l       *ABS*	00000000 RC_DEAD
0000008a l       *ABS*	00000000 RC_BUF
0000008b l       *ABS*	00000000 RC_P2P_NOREPLY
0000008c l       *ABS*	00000000 RC_P2P_REJECT
0000008d l       *ABS*	00000000 RC_P2P_BUSY
0000008e l       *ABS*	00000000 RC_P2P_TIMEOUT
0000008f l       *ABS*	00000000 RC_PKT_TX
00000000 l       *ABS*	00000000 TYPE_BYTE
00000001 l       *ABS*	00000000 TYPE_HALF
00000002 l       *ABS*	00000000 TYPE_WORD
00000005 l       *ABS*	00000000 PORT_SHIFT
000000e0 l       *ABS*	00000000 PORT_MASK
0000001f l       *ABS*	00000000 CPU_MASK
000000ff l       *ABS*	00000000 PORT_ETH
00000100 l       *ABS*	00000000 SDP_BUF_SIZE
00000080 l       *ABS*	00000000 VCPU_SIZE
0000002c l       *ABS*	00000000 VCPU_RT_CODE
0000002d l       *ABS*	00000000 VCPU_CPU_FLAGS
0000002e l       *ABS*	00000000 VCPU_CPU_STATE
0000002f l       *ABS*	00000000 VCPU_APP_ID
0000001c l       *ABS*	00000000 SARK_MSG_INT
0000001d l       *ABS*	00000000 SARK_SIG_INT
00000000 l       *ABS*	00000000 SARK_VIRT_CPU
00000008 l       *ABS*	00000000 SARK_RANDOM
00000030 l       *ABS*	00000000 SARK_CPU_CLK
00000020 l       *ABS*	00000000 SV_SSIZE
00000060 l       *ABS*	00000000 SV_USIZE
00000080 l       *ABS*	00000000 SV_ISIZE
00000020 l       *ABS*	00000000 SV_VSIZE
00000040 l       *ABS*	00000000 SV_RSIZE
00001000 l       *ABS*	00000000 SV_SIZE
e5007fe0 l       *ABS*	00000000 SV_SROM
e5007f80 l       *ABS*	00000000 SV_UBASE
e5007f00 l       *ABS*	00000000 SV_IBASE
e5007f00 l       *ABS*	00000000 SV_SV
00000100 l       *ABS*	00000000 SYS_BOOT
e5007000 l       *ABS*	00000000 SYS_USER_TOP
e5000100 l       *ABS*	00000000 SYS_USER_BASE
e5007ee0 l       *ABS*	00000000 SV_VECTORS
e5007ea0 l       *ABS*	00000000 SV_RANDOM
e5007000 l       *ABS*	00000000 SV_VCPU
e5007900 l       *ABS*	00000000 SV_SPARE
000005a0 l       *ABS*	00000000 SPARE_SIZE
e5007fe0 l       *ABS*	00000000 SROM_FLAG_BASE
e5007f80 l       *ABS*	00000000 STATUS_MAP_BASE
e5007ee0 l       *ABS*	00000000 RST_BLOCK_BASE
00008000 l       *ABS*	00000000 SRF_PRESENT
000000f0 l       *ABS*	00000000 SRF_HW_VER
00000008 l       *ABS*	00000000 SRF_PHY_INIT
00000004 l       *ABS*	00000000 SRF_PHY_RST
00000002 l       *ABS*	00000000 SRF_PHY_WAIT
00000001 l       *ABS*	00000000 SRF_ETH
00000000 l       *ABS*	00000000 SRF_NONE
00000020 l       RO_DATA	00000000 reset_vec
00000004 l       RO_DATA	00000000 undef
00000024 l       RO_DATA	00000000 undef_vec
00000028 l       RO_DATA	00000000 svc_vec
0000002c l       RO_DATA	00000000 pabt_vec
00000030 l       RO_DATA	00000000 dabt_vec
0000003c l       RO_DATA	00000000 fiq_vec
00000078 l       RO_DATA	00000000 reset_entry
000000d4 l       RO_DATA	00000000 undef_error
000000dc l       RO_DATA	00000000 svc_error
000000e4 l       RO_DATA	00000000 pabt_error
000000ec l       RO_DATA	00000000 dabt_error
00000034 l       RO_DATA	00000000 aplx_proc
00000038 l       RO_DATA	00000000 irq_vec
000000f4 l       RO_DATA	00000000 irq_error
000000fc l       RO_DATA	00000000 fiq_error
00000040 l       RO_DATA	00000000 svc_stack
00000042 l       RO_DATA	00000000 irq_stack
00000044 l       RO_DATA	00000000 fiq_stack
00000046 l       RO_DATA	00000000 sys_stack
00000048 l       RO_DATA	00000000 code_top
0000004c l       RO_DATA	00000000 heap_base
00000050 l       RO_DATA	00000000 stack_top
00000054 l       RO_DATA	00000000 stack_size
00000056 l       RO_DATA	00000000 num_msgs
00000057 l       RO_DATA	00000000 sark_slot
00000058 l       RO_DATA	00000000 num_events
00000059 l       RO_DATA	00000000 app_id
0000005a l       RO_DATA	00000000 __PAD1
0000005c l       RO_DATA	00000000 stack_fill
00000060 l       RO_DATA	00000000 event_vec
000000cc l       RO_DATA	00000000 reset_error
00000110 l       RO_DATA	00000000 exc_error
00000134 l       RO_DATA	00000000 cc_error
000001d0 l       RO_DATA	00000000 lg1
0000020c l       RO_DATA	00000000 ws1
0000026c l       RO_DATA	00000000 wc2
00000254 l       RO_DATA	00000000 wc1
00000310 l       RO_DATA	00000000 aplx_buffer
00000314 l       RO_DATA	00000000 aplx_loader
00000300 l       RO_DATA	00000000 aplx_l0
0000032c l       RO_DATA	00000000 aplx_copy
00000328 l       RO_DATA	00000000 aplx_rcopy
0000033a l       RO_DATA	00000000 aplx_fill
0000034a l       RO_DATA	00000000 aplx_exec
00000340 l       RO_DATA	00000000 aplx_l1
00000000 l    df *ABS*	00000000 sark_base.c
00000000 l    df *ABS*	00000000 sark_event.c
00000000 l    df *ABS*	00000000 sark_timer.c
00000000 l    df *ABS*	00000000 sark_hw.c
00000000 l    df *ABS*	00000000 sark_isr.c
00000000 l    df *ABS*	00000000 sark_alloc.c
00000000 l    df *ABS*	00000000 sark_io.c
00000aa4 l     F RO_DATA	00000040 io_buf_init
00000ae4 l     F RO_DATA	00000090 io_put_char
00400028 l     O ZI_DATA	00000004 io_msg
00000e47 l     O RO_DATA	00000011 hex
0040002c l     O ZI_DATA	00000004 io_buf
00400030 l     O ZI_DATA	00000004 buf_ptr
00400034 l     O ZI_DATA	00000004 sp_ptr
00000000 l    df *ABS*	00000000 sark_pkt.c
00000000 l    df *ABS*	00000000 
00000000 l    df *ABS*	00000000 myapp.c
00000000 l    df *ABS*	00000000 sark_build.c
00000000 l    df *ABS*	00000000 
00000040 l       *ABS*	00000000 RO_FROM
00000010 l       *ABS*	00000000 APLX_ENTRY
00000e88 l       *ABS*	00000000 RW_FROM
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 _ITM_registerTMCloneTable
00400000 l       *ABS*	00000000 DTCM_BASE
00400000 l       *ABS*	00000000 RW_BASE
00000000 l       *ABS*	00000000 RW_LENGTH
00000040 l       *ABS*	00000000 APLX_SIZE
00000000 l       *UND*	00000000 _ITM_deregisterTMCloneTable
00400000 l       *ABS*	00000000 ZI_BASE
00000000 l       *ABS*	00000000 RO_BASE
00000000 l       *ABS*	00000000 ITCM_BASE
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
0000010c l       *ABS*	00000000 ZI_LENGTH
000001bc g     F RO_DATA	00000000 sark_lock_get
000002f4  w    F RO_DATA	00000000 sark_pre_main
00000420 g     F RO_DATA	00000034 sark_shmsg_get
00000800 g       *ABS*	00000000 STACK_SIZE
000002f6 g     F RO_DATA	00000000 sark_bx
0000022c g     F RO_DATA	00000000 sark_msg_cpy
000008ec g     F RO_DATA	0000003c event_alloc
000003b0 g     F RO_DATA	0000001e sark_block_init
00000400 g     F RO_DATA	00000020 sark_msg_free
00000350 g     F RO_DATA	00000038 c_main
00000734 g     F RO_DATA	0000016c sark_int
000002c0 g     F RO_DATA	00000000 sark_int_han
000001b4 g     F RO_DATA	00000000 spin1_mode_restore
00000724 g     F RO_DATA	00000010 sark_cmd_fill
00000928 g     F RO_DATA	00000050 sark_vic_init
00000168 g     F RO_DATA	00000000 cpu_shutdown
000001b4 g     F RO_DATA	00000000 cpu_int_restore
00410000 g       *ABS*	00000000 STACK_TOP
0040010c g       ZI_DATA	00000000 HEAP_BASE
000009ac g     F RO_DATA	000000c8 sark_xalloc
00000454 g     F RO_DATA	00000024 sark_shmsg_free
00000128 g       RO_DATA	00000000 rt_error
00000398 g     F RO_DATA	0000000c sark_chip_id
0000055c  w    F RO_DATA	00000010 sark_post_main
00000000 g       RO_DATA	00000000 cpu_reset
00000290 g     F RO_DATA	00000000 sark_div10
00000104 g       RO_DATA	00000000 vic_error
00000e2c g     O RO_DATA	00000006 build_name
000002f4  w    F RO_DATA	00000000 sark_config
000008a0 g     F RO_DATA	00000034 event_pause
00000e34 g     O RO_DATA	00000004 build_date
000001e0 g     F RO_DATA	00000000 sark_lock_free
00000a74 g     F RO_DATA	00000018 sark_alloc
0000018c g     F RO_DATA	00000000 cpu_init_mode
0000023c g     F RO_DATA	00000000 sark_word_cpy
00000178 g     F RO_DATA	00000000 cpu_sleep
00400038 g     O ZI_DATA	00000038 sark
0000056c g     F RO_DATA	000000a8 sark_msg_send
00000614 g     F RO_DATA	00000040 sark_cmd_ver
000008d4 g     F RO_DATA	00000018 event_stop
000001a4 g     F RO_DATA	00000000 cpu_int_disable
00000978 g     F RO_DATA	00000034 sark_vic_set
00000a8c g     F RO_DATA	00000018 sark_heap_init
00400070 g     O ZI_DATA	0000009c event
000006ba g     F RO_DATA	0000006a sark_cmd_write
00000478  w    F RO_DATA	000000e4 sark_init
0000038c  w    F RO_DATA	0000000c rte_handler
000002f8 g     F RO_DATA	00000000 sark_aplx
00000b74 g     F RO_DATA	00000298 io_printf
00000208 g     F RO_DATA	00000000 sark_word_set
000002f0 g     F RO_DATA	00000000 null_int_han
00000388  w    F RO_DATA	00000002 schedule_sysmode
000001f4 g     F RO_DATA	00000000 sark_str_cpy
000003a4 g     F RO_DATA	0000000c sark_core_id
00400000  w    O ZI_DATA	00000028 callback
000001a4 g     F RO_DATA	00000000 spin1_int_disable
00000654 g     F RO_DATA	00000066 sark_cmd_read
00000e58 g       *ABS*	00000000 RO_LENGTH
000003d0 g     F RO_DATA	00000030 sark_msg_get



Disassembly of section RO_DATA:

00000000 <cpu_reset>:
   0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <reset_vec>

00000004 <undef>:
   4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <undef_vec>
   8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <svc_vec>
   c:	e59ff018 	ldr	pc, [pc, #24]	; 2c <pabt_vec>
  10:	e59ff018 	ldr	pc, [pc, #24]	; 30 <dabt_vec>
  14:	ebfffffa 	bl	4 <undef>
  18:	e51ffff0 	ldr	pc, [pc, #-4080]	; fffff030 <ROM_TOP+0x9ff7030>
  1c:	e59ff018 	ldr	pc, [pc, #24]	; 3c <fiq_vec>

00000020 <reset_vec>:
  20:	00000078 	.word	0x00000078

00000024 <undef_vec>:
  24:	000000d4 	.word	0x000000d4

00000028 <svc_vec>:
  28:	000000dc 	.word	0x000000dc

0000002c <pabt_vec>:
  2c:	000000e4 	.word	0x000000e4

00000030 <dabt_vec>:
  30:	000000ec 	.word	0x000000ec

00000034 <aplx_proc>:
  34:	000002f9 	.word	0x000002f9

00000038 <irq_vec>:
  38:	000000f4 	.word	0x000000f4

0000003c <fiq_vec>:
  3c:	000000fc 	.word	0x000000fc

00000040 <svc_stack>:
  40:	0060      	.short	0x0060

00000042 <irq_stack>:
  42:	0040      	.short	0x0040

00000044 <fiq_stack>:
  44:	0040      	.short	0x0040

00000046 <sys_stack>:
  46:	0120      	.short	0x0120

00000048 <code_top>:
  48:	00000e58 	.word	0x00000e58

0000004c <heap_base>:
  4c:	0040010c 	.word	0x0040010c

00000050 <stack_top>:
  50:	00410000 	.word	0x00410000

00000054 <stack_size>:
  54:	0800      	.short	0x0800

00000056 <num_msgs>:
  56:	04          	.byte	0x04

00000057 <sark_slot>:
  57:	0f          	.byte	0x0f

00000058 <num_events>:
  58:	10          	.byte	0x10

00000059 <app_id>:
	...

0000005a <__PAD1>:
	...

0000005c <stack_fill>:
  5c:	deaddead 	.word	0xdeaddead

00000060 <event_vec>:
	...

00000078 <reset_entry>:
  78:	e24f1060 	sub	r1, pc, #96	; 0x60
  7c:	e5c10039 	strb	r0, [r1, #57]	; 0x39
  80:	e28f0044 	add	r0, pc, #68	; 0x44
  84:	e5810000 	str	r0, [r1]
  88:	e59f00f0 	ldr	r0, [pc, #240]	; 180 <DMA_CRCT>
  8c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
  90:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
  94:	e3a0d902 	mov	sp, #32768	; 0x8000
  98:	fa000095 	blx	2f4 <sark_config>
  9c:	e51fd054 	ldr	sp, [pc, #-84]	; 50 <stack_top>
  a0:	e15f25b4 	ldrh	r2, [pc, #-84]	; 54 <stack_size>
  a4:	e51f1050 	ldr	r1, [pc, #-80]	; 5c <stack_fill>
  a8:	e04d0002 	sub	r0, sp, r2
  ac:	eb000055 	bl	208 <sark_word_set>
  b0:	e1a0000d 	mov	r0, sp
  b4:	fa0000ef 	blx	478 <sark_init>
  b8:	e121f000 	msr	CPSR_c, r0
  bc:	fa00008c 	blx	2f4 <sark_config>
  c0:	fa0000a2 	blx	350 <c_main>
  c4:	fa000124 	blx	55c <sark_post_main>
  c8:	eb00002a 	bl	178 <cpu_sleep>

000000cc <reset_error>:
  cc:	e3a00001 	mov	r0, #1
  d0:	ea000014 	b	128 <rt_error>

000000d4 <undef_error>:
  d4:	e3a0b002 	mov	fp, #2
  d8:	ea00000c 	b	110 <exc_error>

000000dc <svc_error>:
  dc:	e3a0b003 	mov	fp, #3
  e0:	ea00000a 	b	110 <exc_error>

000000e4 <pabt_error>:
  e4:	e3a0b004 	mov	fp, #4
  e8:	ea000008 	b	110 <exc_error>

000000ec <dabt_error>:
  ec:	e3a0b005 	mov	fp, #5
  f0:	ea000006 	b	110 <exc_error>

000000f4 <irq_error>:
  f4:	e3a0b006 	mov	fp, #6
  f8:	ea000004 	b	110 <exc_error>

000000fc <fiq_error>:
  fc:	e3a0b007 	mov	fp, #7
 100:	ea000002 	b	110 <exc_error>

00000104 <vic_error>:
 104:	e3a0b008 	mov	fp, #8
 108:	e3a0042f 	mov	r0, #788529152	; 0x2f000000
 10c:	e5900030 	ldr	r0, [r0, #48]	; 0x30

00000110 <exc_error>:
 110:	e1a0a00e 	mov	sl, lr
 114:	e14f8000 	mrs	r8, SPSR
 118:	e38890c0 	orr	r9, r8, #192	; 0xc0
 11c:	e3c99020 	bic	r9, r9, #32
 120:	e12ff009 	msr	CPSR_fsxc, r9
 124:	ea000002 	b	134 <cc_error>

00000128 <rt_error>:
 128:	e1a0b000 	mov	fp, r0
 12c:	e10f8000 	mrs	r8, CPSR
 130:	e1a0a00e 	mov	sl, lr

00000134 <cc_error>:
 134:	e59fc048 	ldr	ip, [pc, #72]	; 184 <DMA_CRCT+0x4>
 138:	e59cc000 	ldr	ip, [ip]
 13c:	e3a09080 	mov	r9, #128	; 0x80
 140:	e59fe040 	ldr	lr, [pc, #64]	; 188 <DMA_CRCT+0x8>
 144:	e02ee99c 	mla	lr, ip, r9, lr
 148:	e1a0900d 	mov	r9, sp
 14c:	e88e07ff 	stm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl}
 150:	e5ceb02c 	strb	fp, [lr, #44]	; 0x2c
 154:	e3a08002 	mov	r8, #2
 158:	e5ce802e 	strb	r8, [lr, #46]	; 0x2e
 15c:	e1a0000b 	mov	r0, fp
 160:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
 164:	fa000088 	blx	38c <rte_handler>

00000168 <cpu_shutdown>:
 168:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
 16c:	e3a0042f 	mov	r0, #788529152	; 0x2f000000
 170:	e3e01000 	mvn	r1, #0
 174:	e5801014 	str	r1, [r0, #20]

00000178 <cpu_sleep>:
 178:	ee070f90 	mcr	15, 0, r0, cr7, cr0, {4}
 17c:	eafffffd 	b	178 <cpu_sleep>
 180:	00001f7e 	.word	0x00001f7e
 184:	00400038 	.word	0x00400038
 188:	e5007000 	.word	0xe5007000

0000018c <cpu_init_mode>:
 18c:	e10f3000 	mrs	r3, CPSR
 190:	e121f001 	msr	CPSR_c, r1
 194:	e1a0d000 	mov	sp, r0
 198:	e12ff003 	msr	CPSR_fsxc, r3
 19c:	e0400102 	sub	r0, r0, r2, lsl #2
 1a0:	e12fff1e 	bx	lr

000001a4 <cpu_int_disable>:
 1a4:	e10f0000 	mrs	r0, CPSR
 1a8:	e38010c0 	orr	r1, r0, #192	; 0xc0
 1ac:	e121f001 	msr	CPSR_c, r1
 1b0:	e12fff1e 	bx	lr

000001b4 <cpu_int_restore>:
 1b4:	e12ff000 	msr	CPSR_fsxc, r0
 1b8:	e12fff1e 	bx	lr

000001bc <sark_lock_get>:
 1bc:	e3a0c4e2 	mov	ip, #-503316480	; 0xe2000000
 1c0:	e08cc100 	add	ip, ip, r0, lsl #2
 1c4:	e10f0000 	mrs	r0, CPSR
 1c8:	e38010c0 	orr	r1, r0, #192	; 0xc0
 1cc:	e121f001 	msr	CPSR_c, r1

000001d0 <lg1>:
 1d0:	e59c1100 	ldr	r1, [ip, #256]	; 0x100
 1d4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 1d8:	1afffffc 	bne	1d0 <lg1>
 1dc:	e12fff1e 	bx	lr

000001e0 <sark_lock_free>:
 1e0:	e3a0c4e2 	mov	ip, #-503316480	; 0xe2000000
 1e4:	e08c1101 	add	r1, ip, r1, lsl #2
 1e8:	e5911180 	ldr	r1, [r1, #384]	; 0x180
 1ec:	e121f000 	msr	CPSR_c, r0
 1f0:	e12fff1e 	bx	lr

000001f4 <sark_str_cpy>:
 1f4:	e4d12001 	ldrb	r2, [r1], #1
 1f8:	e3520000 	cmp	r2, #0
 1fc:	e4c02001 	strb	r2, [r0], #1
 200:	1afffffb 	bne	1f4 <sark_str_cpy>
 204:	e12fff1e 	bx	lr

00000208 <sark_word_set>:
 208:	e1a03001 	mov	r3, r1

0000020c <ws1>:
 20c:	e2522010 	subs	r2, r2, #16
 210:	28a0000a 	stmiacs	r0!, {r1, r3}
 214:	28a0000a 	stmiacs	r0!, {r1, r3}
 218:	2afffffb 	bcs	20c <ws1>
 21c:	e1b02e82 	lsls	r2, r2, #29
 220:	28a0000a 	stmiacs	r0!, {r1, r3}
 224:	48a00002 	stmiami	r0!, {r1}
 228:	e12fff1e 	bx	lr

0000022c <sark_msg_cpy>:
 22c:	e2800004 	add	r0, r0, #4
 230:	e2811004 	add	r1, r1, #4
 234:	e1d120b0 	ldrh	r2, [r1]
 238:	e2822004 	add	r2, r2, #4

0000023c <sark_word_cpy>:
 23c:	e3120003 	tst	r2, #3
 240:	13c22003 	bicne	r2, r2, #3
 244:	12822004 	addne	r2, r2, #4
 248:	e92d4010 	push	{r4, lr}
 24c:	e2522020 	subs	r2, r2, #32
 250:	3a000005 	bcc	26c <wc2>

00000254 <wc1>:
 254:	e8b15018 	ldm	r1!, {r3, r4, ip, lr}
 258:	e8a05018 	stmia	r0!, {r3, r4, ip, lr}
 25c:	e8b15018 	ldm	r1!, {r3, r4, ip, lr}
 260:	e8a05018 	stmia	r0!, {r3, r4, ip, lr}
 264:	e2522020 	subs	r2, r2, #32
 268:	2afffff9 	bcs	254 <wc1>

0000026c <wc2>:
 26c:	e1b0ce02 	lsls	ip, r2, #28
 270:	28b15018 	ldmcs	r1!, {r3, r4, ip, lr}
 274:	28a05018 	stmiacs	r0!, {r3, r4, ip, lr}
 278:	48b10018 	ldmmi	r1!, {r3, r4}
 27c:	48a00018 	stmiami	r0!, {r3, r4}
 280:	e1b0cf02 	lsls	ip, r2, #30
 284:	24913004 	ldrcs	r3, [r1], #4
 288:	24803004 	strcs	r3, [r0], #4
 28c:	e8bd8010 	pop	{r4, pc}

00000290 <sark_div10>:
 290:	e241200a 	sub	r2, r1, #10
 294:	e0411121 	sub	r1, r1, r1, lsr #2
 298:	e0811221 	add	r1, r1, r1, lsr #4
 29c:	e0811421 	add	r1, r1, r1, lsr #8
 2a0:	e0811821 	add	r1, r1, r1, lsr #16
 2a4:	e1a011a1 	lsr	r1, r1, #3
 2a8:	e0813101 	add	r3, r1, r1, lsl #2
 2ac:	e0522083 	subs	r2, r2, r3, lsl #1
 2b0:	52811001 	addpl	r1, r1, #1
 2b4:	4282200a 	addmi	r2, r2, #10
 2b8:	e8800006 	stm	r0, {r1, r2}
 2bc:	e12fff1e 	bx	lr

000002c0 <sark_int_han>:
 2c0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
 2c4:	e24e0004 	sub	r0, lr, #4
 2c8:	e14fc000 	mrs	ip, SPSR
 2cc:	e321f01f 	msr	CPSR_c, #31
 2d0:	e92d5000 	push	{ip, lr}
 2d4:	fa000116 	blx	734 <sark_int>
 2d8:	e8bd5000 	pop	{ip, lr}
 2dc:	e321f092 	msr	CPSR_c, #146	; 0x92
 2e0:	e16ff00c 	msr	SPSR_fsxc, ip
 2e4:	e3a0042f 	mov	r0, #788529152	; 0x2f000000
 2e8:	e5800030 	str	r0, [r0, #48]	; 0x30
 2ec:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

000002f0 <null_int_han>:
 2f0:	e25ef004 	subs	pc, lr, #4

000002f4 <sark_config>:
 2f4:	4770      	bx	lr

000002f6 <sark_bx>:
 2f6:	4700      	bx	r0

000002f8 <sark_aplx>:
 2f8:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 2fa:	4905      	ldr	r1, [pc, #20]	; (310 <aplx_buffer>)
 2fc:	a605      	add	r6, pc, #20	; (adr r6, 314 <aplx_loader>)
 2fe:	2740      	movs	r7, #64	; 0x40

00000300 <aplx_l0>:
 300:	ce3c      	ldmia	r6!, {r2, r3, r4, r5}
 302:	c13c      	stmia	r1!, {r2, r3, r4, r5}
 304:	3f10      	subs	r7, #16
 306:	d1fb      	bne.n	300 <aplx_l0>
 308:	1c04      	adds	r4, r0, #0
 30a:	393f      	subs	r1, #63	; 0x3f
 30c:	4708      	bx	r1
	...

00000310 <aplx_buffer>:
 310:	00007fc0 	.word	0x00007fc0

00000314 <aplx_loader>:
 314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 316:	2801      	cmp	r0, #1
 318:	d008      	beq.n	32c <aplx_copy>
 31a:	2802      	cmp	r0, #2
 31c:	d004      	beq.n	328 <aplx_rcopy>
 31e:	2803      	cmp	r0, #3
 320:	d00b      	beq.n	33a <aplx_fill>
 322:	2804      	cmp	r0, #4
 324:	d011      	beq.n	34a <aplx_exec>
 326:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

00000328 <aplx_rcopy>:
 328:	1912      	adds	r2, r2, r4
 32a:	3a10      	subs	r2, #16

0000032c <aplx_copy>:
 32c:	cae1      	ldmia	r2!, {r0, r5, r6, r7}
 32e:	c1e1      	stmia	r1!, {r0, r5, r6, r7}
 330:	cae1      	ldmia	r2!, {r0, r5, r6, r7}
 332:	c1e1      	stmia	r1!, {r0, r5, r6, r7}
 334:	3b20      	subs	r3, #32
 336:	d8f9      	bhi.n	32c <aplx_copy>
 338:	e7ec      	b.n	314 <aplx_loader>

0000033a <aplx_fill>:
 33a:	1c1d      	adds	r5, r3, #0
 33c:	1c1e      	adds	r6, r3, #0
 33e:	1c1f      	adds	r7, r3, #0

00000340 <aplx_l1>:
 340:	c1e8      	stmia	r1!, {r3, r5, r6, r7}
 342:	c1e8      	stmia	r1!, {r3, r5, r6, r7}
 344:	3a20      	subs	r2, #32
 346:	d8fb      	bhi.n	340 <aplx_l1>
 348:	e7e4      	b.n	314 <aplx_loader>

0000034a <aplx_exec>:
 34a:	9800      	ldr	r0, [sp, #0]
 34c:	4788      	blx	r1
 34e:	e7e1      	b.n	314 <aplx_loader>

00000350 <c_main>:
 350:	b513      	push	{r0, r1, r4, lr}
 352:	f000 f821 	bl	398 <sark_chip_id>
 356:	1c04      	adds	r4, r0, #0
 358:	f000 f824 	bl	3a4 <sark_core_id>
 35c:	0623      	lsls	r3, r4, #24
 35e:	0a22      	lsrs	r2, r4, #8
 360:	0e1b      	lsrs	r3, r3, #24
 362:	4906      	ldr	r1, [pc, #24]	; (37c <c_main+0x2c>)
 364:	9000      	str	r0, [sp, #0]
 366:	2000      	movs	r0, #0
 368:	f000 fc04 	bl	b74 <io_printf>
 36c:	4b04      	ldr	r3, [pc, #16]	; (380 <c_main+0x30>)
 36e:	2000      	movs	r0, #0
 370:	881a      	ldrh	r2, [r3, #0]
 372:	4904      	ldr	r1, [pc, #16]	; (384 <c_main+0x34>)
 374:	885b      	ldrh	r3, [r3, #2]
 376:	f000 fbfd 	bl	b74 <io_printf>
 37a:	bd13      	pop	{r0, r1, r4, pc}
 37c:	00000e0c 	.word	0x00000e0c
 380:	e5007f00 	.word	0xe5007f00
 384:	00000e1a 	.word	0x00000e1a

00000388 <schedule_sysmode>:
 388:	4770      	bx	lr
	...

0000038c <rte_handler>:
 38c:	4b01      	ldr	r3, [pc, #4]	; (394 <rte_handler+0x8>)
 38e:	2208      	movs	r2, #8
 390:	701a      	strb	r2, [r3, #0]
 392:	4770      	bx	lr
 394:	e5007f2b 	.word	0xe5007f2b

00000398 <sark_chip_id>:
 398:	4b01      	ldr	r3, [pc, #4]	; (3a0 <sark_chip_id+0x8>)
 39a:	8818      	ldrh	r0, [r3, #0]
 39c:	4770      	bx	lr
 39e:	46c0      	nop			; (mov r8, r8)
 3a0:	e5007f00 	.word	0xe5007f00

000003a4 <sark_core_id>:
 3a4:	4b01      	ldr	r3, [pc, #4]	; (3ac <sark_core_id+0x8>)
 3a6:	6818      	ldr	r0, [r3, #0]
 3a8:	4770      	bx	lr
 3aa:	46c0      	nop			; (mov r8, r8)
 3ac:	00400038 	.word	0x00400038

000003b0 <sark_block_init>:
 3b0:	b530      	push	{r4, r5, lr}
 3b2:	1c0b      	adds	r3, r1, #0
 3b4:	1c04      	adds	r4, r0, #0
 3b6:	e002      	b.n	3be <sark_block_init+0xe>
 3b8:	18a5      	adds	r5, r4, r2
 3ba:	6025      	str	r5, [r4, #0]
 3bc:	1c2c      	adds	r4, r5, #0
 3be:	3b01      	subs	r3, #1
 3c0:	2b00      	cmp	r3, #0
 3c2:	d1f9      	bne.n	3b8 <sark_block_init+0x8>
 3c4:	3901      	subs	r1, #1
 3c6:	434a      	muls	r2, r1
 3c8:	1880      	adds	r0, r0, r2
 3ca:	6003      	str	r3, [r0, #0]
 3cc:	bd30      	pop	{r4, r5, pc}
	...

000003d0 <sark_msg_get>:
 3d0:	b510      	push	{r4, lr}
 3d2:	f7ff eee8 	blx	1a4 <cpu_int_disable>
 3d6:	4b09      	ldr	r3, [pc, #36]	; (3fc <sark_msg_get+0x2c>)
 3d8:	6a1c      	ldr	r4, [r3, #32]
 3da:	2c00      	cmp	r4, #0
 3dc:	d00a      	beq.n	3f4 <sark_msg_get+0x24>
 3de:	6822      	ldr	r2, [r4, #0]
 3e0:	621a      	str	r2, [r3, #32]
 3e2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 3e4:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 3e6:	3201      	adds	r2, #1
 3e8:	0412      	lsls	r2, r2, #16
 3ea:	0c12      	lsrs	r2, r2, #16
 3ec:	849a      	strh	r2, [r3, #36]	; 0x24
 3ee:	4291      	cmp	r1, r2
 3f0:	d200      	bcs.n	3f4 <sark_msg_get+0x24>
 3f2:	84da      	strh	r2, [r3, #38]	; 0x26
 3f4:	f7ff eede 	blx	1b4 <cpu_int_restore>
 3f8:	1c20      	adds	r0, r4, #0
 3fa:	bd10      	pop	{r4, pc}
 3fc:	00400038 	.word	0x00400038

00000400 <sark_msg_free>:
 400:	b510      	push	{r4, lr}
 402:	1c04      	adds	r4, r0, #0
 404:	f7ff eece 	blx	1a4 <cpu_int_disable>
 408:	4b04      	ldr	r3, [pc, #16]	; (41c <MC_TABLE_SIZE+0x1c>)
 40a:	6a1a      	ldr	r2, [r3, #32]
 40c:	6022      	str	r2, [r4, #0]
 40e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 410:	621c      	str	r4, [r3, #32]
 412:	3a01      	subs	r2, #1
 414:	849a      	strh	r2, [r3, #36]	; 0x24
 416:	f7ff eece 	blx	1b4 <cpu_int_restore>
 41a:	bd10      	pop	{r4, pc}
 41c:	00400038 	.word	0x00400038

00000420 <sark_shmsg_get>:
 420:	b510      	push	{r4, lr}
 422:	2000      	movs	r0, #0
 424:	f7ff eeca 	blx	1bc <sark_lock_get>
 428:	4b09      	ldr	r3, [pc, #36]	; (450 <sark_shmsg_get+0x30>)
 42a:	681c      	ldr	r4, [r3, #0]
 42c:	2c00      	cmp	r4, #0
 42e:	d00a      	beq.n	446 <sark_shmsg_get+0x26>
 430:	6822      	ldr	r2, [r4, #0]
 432:	601a      	str	r2, [r3, #0]
 434:	889a      	ldrh	r2, [r3, #4]
 436:	88d9      	ldrh	r1, [r3, #6]
 438:	3201      	adds	r2, #1
 43a:	0412      	lsls	r2, r2, #16
 43c:	0c12      	lsrs	r2, r2, #16
 43e:	809a      	strh	r2, [r3, #4]
 440:	4291      	cmp	r1, r2
 442:	d200      	bcs.n	446 <sark_shmsg_get+0x26>
 444:	80da      	strh	r2, [r3, #6]
 446:	2100      	movs	r1, #0
 448:	f7ff eeca 	blx	1e0 <sark_lock_free>
 44c:	1c20      	adds	r0, r4, #0
 44e:	bd10      	pop	{r4, pc}
 450:	e5007f68 	.word	0xe5007f68

00000454 <sark_shmsg_free>:
 454:	b510      	push	{r4, lr}
 456:	1c04      	adds	r4, r0, #0
 458:	2000      	movs	r0, #0
 45a:	f7ff eeb0 	blx	1bc <sark_lock_get>
 45e:	4b05      	ldr	r3, [pc, #20]	; (474 <sark_shmsg_free+0x20>)
 460:	2100      	movs	r1, #0
 462:	681a      	ldr	r2, [r3, #0]
 464:	6022      	str	r2, [r4, #0]
 466:	889a      	ldrh	r2, [r3, #4]
 468:	601c      	str	r4, [r3, #0]
 46a:	3a01      	subs	r2, #1
 46c:	809a      	strh	r2, [r3, #4]
 46e:	f7ff eeb8 	blx	1e0 <sark_lock_free>
 472:	bd10      	pop	{r4, pc}
 474:	e5007f68 	.word	0xe5007f68

00000478 <sark_init>:
 478:	b570      	push	{r4, r5, r6, lr}
 47a:	2520      	movs	r5, #32
 47c:	8c2b      	ldrh	r3, [r5, #32]
 47e:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 480:	009b      	lsls	r3, r3, #2
 482:	1ac0      	subs	r0, r0, r3
 484:	21d2      	movs	r1, #210	; 0xd2
 486:	f7ff ee82 	blx	18c <cpu_init_mode>
 48a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 48c:	21d1      	movs	r1, #209	; 0xd1
 48e:	f7ff ee7e 	blx	18c <cpu_init_mode>
 492:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 494:	21df      	movs	r1, #223	; 0xdf
 496:	f7ff ee7a 	blx	18c <cpu_init_mode>
 49a:	4c28      	ldr	r4, [pc, #160]	; (53c <sark_init+0xc4>)
 49c:	2656      	movs	r6, #86	; 0x56
 49e:	1c01      	adds	r1, r0, #0
 4a0:	6120      	str	r0, [r4, #16]
 4a2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 4a4:	6160      	str	r0, [r4, #20]
 4a6:	f000 faf1 	bl	a8c <sark_heap_init>
 4aa:	4b25      	ldr	r3, [pc, #148]	; (540 <sark_init+0xc8>)
 4ac:	4a25      	ldr	r2, [pc, #148]	; (544 <sark_init+0xcc>)
 4ae:	681b      	ldr	r3, [r3, #0]
 4b0:	4d25      	ldr	r5, [pc, #148]	; (548 <sark_init+0xd0>)
 4b2:	0e1b      	lsrs	r3, r3, #24
 4b4:	6063      	str	r3, [r4, #4]
 4b6:	189b      	adds	r3, r3, r2
 4b8:	2192      	movs	r1, #146	; 0x92
 4ba:	0049      	lsls	r1, r1, #1
 4bc:	61a0      	str	r0, [r4, #24]
 4be:	791b      	ldrb	r3, [r3, #4]
 4c0:	6023      	str	r3, [r4, #0]
 4c2:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 4c4:	8623      	strh	r3, [r4, #48]	; 0x30
 4c6:	4b21      	ldr	r3, [pc, #132]	; (54c <sark_init+0xd4>)
 4c8:	60a3      	str	r3, [r4, #8]
 4ca:	7830      	ldrb	r0, [r6, #0]
 4cc:	f000 fad2 	bl	a74 <sark_alloc>
 4d0:	2292      	movs	r2, #146	; 0x92
 4d2:	0052      	lsls	r2, r2, #1
 4d4:	6220      	str	r0, [r4, #32]
 4d6:	7831      	ldrb	r1, [r6, #0]
 4d8:	f7ff ff6a 	bl	3b0 <sark_block_init>
 4dc:	6823      	ldr	r3, [r4, #0]
 4de:	2b11      	cmp	r3, #17
 4e0:	d81c      	bhi.n	51c <sark_init+0xa4>
 4e2:	4a1b      	ldr	r2, [pc, #108]	; (550 <sark_init+0xd8>)
 4e4:	01d8      	lsls	r0, r3, #7
 4e6:	1880      	adds	r0, r0, r2
 4e8:	6daa      	ldr	r2, [r5, #88]	; 0x58
 4ea:	61e0      	str	r0, [r4, #28]
 4ec:	4353      	muls	r3, r2
 4ee:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 4f0:	009b      	lsls	r3, r3, #2
 4f2:	18d3      	adds	r3, r2, r3
 4f4:	2100      	movs	r1, #0
 4f6:	2270      	movs	r2, #112	; 0x70
 4f8:	6363      	str	r3, [r4, #52]	; 0x34
 4fa:	f7ff ee86 	blx	208 <sark_word_set>
 4fe:	69e0      	ldr	r0, [r4, #28]
 500:	2359      	movs	r3, #89	; 0x59
 502:	781a      	ldrb	r2, [r3, #0]
 504:	1c03      	adds	r3, r0, #0
 506:	332f      	adds	r3, #47	; 0x2f
 508:	701a      	strb	r2, [r3, #0]
 50a:	3b01      	subs	r3, #1
 50c:	2204      	movs	r2, #4
 50e:	701a      	strb	r2, [r3, #0]
 510:	69ed      	ldr	r5, [r5, #28]
 512:	6445      	str	r5, [r0, #68]	; 0x44
 514:	490f      	ldr	r1, [pc, #60]	; (554 <sark_init+0xdc>)
 516:	3048      	adds	r0, #72	; 0x48
 518:	f7ff ee6c 	blx	1f4 <sark_str_cpy>
 51c:	f000 fa04 	bl	928 <sark_vic_init>
 520:	2357      	movs	r3, #87	; 0x57
 522:	7818      	ldrb	r0, [r3, #0]
 524:	2112      	movs	r1, #18
 526:	2201      	movs	r2, #1
 528:	4b0b      	ldr	r3, [pc, #44]	; (558 <sark_init+0xe0>)
 52a:	f000 fa25 	bl	978 <sark_vic_set>
 52e:	2358      	movs	r3, #88	; 0x58
 530:	7818      	ldrb	r0, [r3, #0]
 532:	f000 f9db 	bl	8ec <event_alloc>
 536:	201f      	movs	r0, #31
 538:	bd70      	pop	{r4, r5, r6, pc}
 53a:	46c0      	nop			; (mov r8, r8)
 53c:	00400038 	.word	0x00400038
 540:	40000014 	.word	0x40000014
 544:	e5007f90 	.word	0xe5007f90
 548:	e5007f00 	.word	0xe5007f00
 54c:	deaddead 	.word	0xdeaddead
 550:	e5007000 	.word	0xe5007000
 554:	00000e2c 	.word	0x00000e2c
 558:	000002c0 	.word	0x000002c0

0000055c <sark_post_main>:
 55c:	4b02      	ldr	r3, [pc, #8]	; (568 <sark_post_main+0xc>)
 55e:	2208      	movs	r2, #8
 560:	69db      	ldr	r3, [r3, #28]
 562:	332e      	adds	r3, #46	; 0x2e
 564:	701a      	strb	r2, [r3, #0]
 566:	4770      	bx	lr
 568:	00400038 	.word	0x00400038

0000056c <sark_msg_send>:
 56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 56e:	1c05      	adds	r5, r0, #0
 570:	1c0f      	adds	r7, r1, #0
 572:	f7ff ff55 	bl	420 <sark_shmsg_get>
 576:	1c04      	adds	r4, r0, #0
 578:	3800      	subs	r0, #0
 57a:	d03d      	beq.n	5f8 <SPARE_SIZE+0x58>
 57c:	1c29      	adds	r1, r5, #0
 57e:	f7ff ee56 	blx	22c <sark_msg_cpy>
 582:	4e1e      	ldr	r6, [pc, #120]	; (5fc <SPARE_SIZE+0x5c>)
 584:	2501      	movs	r5, #1
 586:	69f3      	ldr	r3, [r6, #28]
 588:	1c28      	adds	r0, r5, #0
 58a:	635c      	str	r4, [r3, #52]	; 0x34
 58c:	3339      	adds	r3, #57	; 0x39
 58e:	701d      	strb	r5, [r3, #0]
 590:	f7ff ee14 	blx	1bc <sark_lock_get>
 594:	6831      	ldr	r1, [r6, #0]
 596:	4a1a      	ldr	r2, [pc, #104]	; (600 <ETH_TX_SIZE>)
 598:	1c2e      	adds	r6, r5, #0
 59a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 59c:	408e      	lsls	r6, r1
 59e:	1c31      	adds	r1, r6, #0
 5a0:	4319      	orrs	r1, r3
 5a2:	6451      	str	r1, [r2, #68]	; 0x44
 5a4:	2b00      	cmp	r3, #0
 5a6:	d106      	bne.n	5b6 <SPARE_SIZE+0x16>
 5a8:	4b16      	ldr	r3, [pc, #88]	; (604 <ETH_TX_SIZE+0x4>)
 5aa:	4a17      	ldr	r2, [pc, #92]	; (608 <ETH_TX_SIZE+0x8>)
 5ac:	781b      	ldrb	r3, [r3, #0]
 5ae:	409d      	lsls	r5, r3
 5b0:	4b16      	ldr	r3, [pc, #88]	; (60c <ETH_TX_SIZE+0xc>)
 5b2:	18ad      	adds	r5, r5, r2
 5b4:	601d      	str	r5, [r3, #0]
 5b6:	2101      	movs	r1, #1
 5b8:	f7ff ee12 	blx	1e0 <sark_lock_free>
 5bc:	4b0f      	ldr	r3, [pc, #60]	; (5fc <SPARE_SIZE+0x5c>)
 5be:	4a14      	ldr	r2, [pc, #80]	; (610 <ETH_TX_SIZE+0x10>)
 5c0:	69db      	ldr	r3, [r3, #28]
 5c2:	6815      	ldr	r5, [r2, #0]
 5c4:	1c18      	adds	r0, r3, #0
 5c6:	3039      	adds	r0, #57	; 0x39
 5c8:	e008      	b.n	5dc <SPARE_SIZE+0x3c>
 5ca:	6811      	ldr	r1, [r2, #0]
 5cc:	1b49      	subs	r1, r1, r5
 5ce:	42b9      	cmp	r1, r7
 5d0:	d904      	bls.n	5dc <SPARE_SIZE+0x3c>
 5d2:	3339      	adds	r3, #57	; 0x39
 5d4:	781b      	ldrb	r3, [r3, #0]
 5d6:	2b00      	cmp	r3, #0
 5d8:	d009      	beq.n	5ee <SPARE_SIZE+0x4e>
 5da:	e003      	b.n	5e4 <SPARE_SIZE+0x44>
 5dc:	7801      	ldrb	r1, [r0, #0]
 5de:	2900      	cmp	r1, #0
 5e0:	d1f3      	bne.n	5ca <SPARE_SIZE+0x2a>
 5e2:	e7f6      	b.n	5d2 <SPARE_SIZE+0x32>
 5e4:	1c20      	adds	r0, r4, #0
 5e6:	f7ff ff35 	bl	454 <sark_shmsg_free>
 5ea:	2000      	movs	r0, #0
 5ec:	e004      	b.n	5f8 <SPARE_SIZE+0x58>
 5ee:	4b03      	ldr	r3, [pc, #12]	; (5fc <SPARE_SIZE+0x5c>)
 5f0:	2001      	movs	r0, #1
 5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 5f4:	3201      	adds	r2, #1
 5f6:	62da      	str	r2, [r3, #44]	; 0x2c
 5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 5fa:	46c0      	nop			; (mov r8, r8)
 5fc:	00400038 	.word	0x00400038
 600:	e5007f00 	.word	0xe5007f00
 604:	e5007fa8 	.word	0xe5007fa8
 608:	5ec00000 	.word	0x5ec00000
 60c:	e2000008 	.word	0xe2000008
 610:	e5007f10 	.word	0xe5007f10

00000614 <sark_cmd_ver>:
 614:	b508      	push	{r3, lr}
 616:	4b0a      	ldr	r3, [pc, #40]	; (640 <sark_cmd_ver+0x2c>)
 618:	6859      	ldr	r1, [r3, #4]
 61a:	681b      	ldr	r3, [r3, #0]
 61c:	020a      	lsls	r2, r1, #8
 61e:	18d3      	adds	r3, r2, r3
 620:	4a08      	ldr	r2, [pc, #32]	; (644 <sark_cmd_ver+0x30>)
 622:	4909      	ldr	r1, [pc, #36]	; (648 <sark_cmd_ver+0x34>)
 624:	8812      	ldrh	r2, [r2, #0]
 626:	0412      	lsls	r2, r2, #16
 628:	189b      	adds	r3, r3, r2
 62a:	6143      	str	r3, [r0, #20]
 62c:	4b07      	ldr	r3, [pc, #28]	; (64c <sark_cmd_ver+0x38>)
 62e:	6183      	str	r3, [r0, #24]
 630:	4b07      	ldr	r3, [pc, #28]	; (650 <sark_cmd_ver+0x3c>)
 632:	681b      	ldr	r3, [r3, #0]
 634:	61c3      	str	r3, [r0, #28]
 636:	3020      	adds	r0, #32
 638:	f7ff eddc 	blx	1f4 <sark_str_cpy>
 63c:	201b      	movs	r0, #27
 63e:	bd08      	pop	{r3, pc}
 640:	00400038 	.word	0x00400038
 644:	e5007f00 	.word	0xe5007f00
 648:	00000e38 	.word	0x00000e38
 64c:	00780100 	.word	0x00780100
 650:	00000e34 	.word	0x00000e34

00000654 <sark_cmd_read>:
 654:	69c1      	ldr	r1, [r0, #28]
 656:	b530      	push	{r4, r5, lr}
 658:	6983      	ldr	r3, [r0, #24]
 65a:	2902      	cmp	r1, #2
 65c:	d803      	bhi.n	666 <sark_cmd_read+0x12>
 65e:	2280      	movs	r2, #128	; 0x80
 660:	0052      	lsls	r2, r2, #1
 662:	429a      	cmp	r2, r3
 664:	d203      	bcs.n	66e <sark_cmd_read+0x1a>
 666:	2384      	movs	r3, #132	; 0x84
 668:	8203      	strh	r3, [r0, #16]
 66a:	2300      	movs	r3, #0
 66c:	e023      	b.n	6b6 <sark_cmd_read+0x62>
 66e:	6942      	ldr	r2, [r0, #20]
 670:	3014      	adds	r0, #20
 672:	2900      	cmp	r1, #0
 674:	d108      	bne.n	688 <sark_cmd_read+0x34>
 676:	18d1      	adds	r1, r2, r3
 678:	1a80      	subs	r0, r0, r2
 67a:	e002      	b.n	682 <sark_cmd_read+0x2e>
 67c:	7814      	ldrb	r4, [r2, #0]
 67e:	5484      	strb	r4, [r0, r2]
 680:	3201      	adds	r2, #1
 682:	428a      	cmp	r2, r1
 684:	d1fa      	bne.n	67c <sark_cmd_read+0x28>
 686:	e016      	b.n	6b6 <sark_cmd_read+0x62>
 688:	2901      	cmp	r1, #1
 68a:	d10a      	bne.n	6a2 <sark_cmd_read+0x4e>
 68c:	0859      	lsrs	r1, r3, #1
 68e:	0049      	lsls	r1, r1, #1
 690:	1889      	adds	r1, r1, r2
 692:	1a80      	subs	r0, r0, r2
 694:	e002      	b.n	69c <sark_cmd_read+0x48>
 696:	8814      	ldrh	r4, [r2, #0]
 698:	5284      	strh	r4, [r0, r2]
 69a:	3202      	adds	r2, #2
 69c:	428a      	cmp	r2, r1
 69e:	d1fa      	bne.n	696 <sark_cmd_read+0x42>
 6a0:	e009      	b.n	6b6 <sark_cmd_read+0x62>
 6a2:	089c      	lsrs	r4, r3, #2
 6a4:	00a4      	lsls	r4, r4, #2
 6a6:	1904      	adds	r4, r0, r4
 6a8:	1c01      	adds	r1, r0, #0
 6aa:	e002      	b.n	6b2 <sark_cmd_read+0x5e>
 6ac:	1a0d      	subs	r5, r1, r0
 6ae:	58ad      	ldr	r5, [r5, r2]
 6b0:	c120      	stmia	r1!, {r5}
 6b2:	42a1      	cmp	r1, r4
 6b4:	d1fa      	bne.n	6ac <sark_cmd_read+0x58>
 6b6:	1c18      	adds	r0, r3, #0
 6b8:	bd30      	pop	{r4, r5, pc}

000006ba <sark_cmd_write>:
 6ba:	69c1      	ldr	r1, [r0, #28]
 6bc:	b530      	push	{r4, r5, lr}
 6be:	6982      	ldr	r2, [r0, #24]
 6c0:	2902      	cmp	r1, #2
 6c2:	d803      	bhi.n	6cc <sark_cmd_write+0x12>
 6c4:	2380      	movs	r3, #128	; 0x80
 6c6:	005b      	lsls	r3, r3, #1
 6c8:	4293      	cmp	r3, r2
 6ca:	d202      	bcs.n	6d2 <sark_cmd_write+0x18>
 6cc:	2384      	movs	r3, #132	; 0x84
 6ce:	8203      	strh	r3, [r0, #16]
 6d0:	e026      	b.n	720 <sark_cmd_write+0x66>
 6d2:	6943      	ldr	r3, [r0, #20]
 6d4:	2900      	cmp	r1, #0
 6d6:	d10b      	bne.n	6f0 <sark_cmd_write+0x36>
 6d8:	1881      	adds	r1, r0, r2
 6da:	1c02      	adds	r2, r0, #0
 6dc:	e005      	b.n	6ea <sark_cmd_write+0x30>
 6de:	1c14      	adds	r4, r2, #0
 6e0:	3420      	adds	r4, #32
 6e2:	7825      	ldrb	r5, [r4, #0]
 6e4:	1a14      	subs	r4, r2, r0
 6e6:	3201      	adds	r2, #1
 6e8:	54e5      	strb	r5, [r4, r3]
 6ea:	428a      	cmp	r2, r1
 6ec:	d1f7      	bne.n	6de <sark_cmd_write+0x24>
 6ee:	e017      	b.n	720 <sark_cmd_write+0x66>
 6f0:	3020      	adds	r0, #32
 6f2:	2901      	cmp	r1, #1
 6f4:	d10b      	bne.n	70e <sark_cmd_write+0x54>
 6f6:	0851      	lsrs	r1, r2, #1
 6f8:	0049      	lsls	r1, r1, #1
 6fa:	1841      	adds	r1, r0, r1
 6fc:	1c02      	adds	r2, r0, #0
 6fe:	e003      	b.n	708 <sark_cmd_write+0x4e>
 700:	8815      	ldrh	r5, [r2, #0]
 702:	1a14      	subs	r4, r2, r0
 704:	3202      	adds	r2, #2
 706:	52e5      	strh	r5, [r4, r3]
 708:	428a      	cmp	r2, r1
 70a:	d1f9      	bne.n	700 <sark_cmd_write+0x46>
 70c:	e008      	b.n	720 <sark_cmd_write+0x66>
 70e:	0892      	lsrs	r2, r2, #2
 710:	0092      	lsls	r2, r2, #2
 712:	18d2      	adds	r2, r2, r3
 714:	1ac0      	subs	r0, r0, r3
 716:	e001      	b.n	71c <sark_cmd_write+0x62>
 718:	58c1      	ldr	r1, [r0, r3]
 71a:	c302      	stmia	r3!, {r1}
 71c:	4293      	cmp	r3, r2
 71e:	d1fb      	bne.n	718 <sark_cmd_write+0x5e>
 720:	2000      	movs	r0, #0
 722:	bd30      	pop	{r4, r5, pc}

00000724 <sark_cmd_fill>:
 724:	b508      	push	{r3, lr}
 726:	1c03      	adds	r3, r0, #0
 728:	3314      	adds	r3, #20
 72a:	cb07      	ldmia	r3!, {r0, r1, r2}
 72c:	f7ff ed6c 	blx	208 <sark_word_set>
 730:	2000      	movs	r0, #0
 732:	bd08      	pop	{r3, pc}

00000734 <sark_int>:
 734:	4953      	ldr	r1, [pc, #332]	; (884 <STACK_SIZE+0x84>)
 736:	2201      	movs	r2, #1
 738:	684b      	ldr	r3, [r1, #4]
 73a:	b570      	push	{r4, r5, r6, lr}
 73c:	409a      	lsls	r2, r3
 73e:	4b52      	ldr	r3, [pc, #328]	; (888 <STACK_SIZE+0x88>)
 740:	1c0c      	adds	r4, r1, #0
 742:	18d2      	adds	r2, r2, r3
 744:	4b51      	ldr	r3, [pc, #324]	; (88c <STACK_SIZE+0x8c>)
 746:	601a      	str	r2, [r3, #0]
 748:	69ca      	ldr	r2, [r1, #28]
 74a:	1c16      	adds	r6, r2, #0
 74c:	3638      	adds	r6, #56	; 0x38
 74e:	7833      	ldrb	r3, [r6, #0]
 750:	6b15      	ldr	r5, [r2, #48]	; 0x30
 752:	2b03      	cmp	r3, #3
 754:	d100      	bne.n	758 <sark_int+0x24>
 756:	6310      	str	r0, [r2, #48]	; 0x30
 758:	2000      	movs	r0, #0
 75a:	7030      	strb	r0, [r6, #0]
 75c:	2b01      	cmp	r3, #1
 75e:	d169      	bne.n	834 <STACK_SIZE+0x34>
 760:	f7ff fe36 	bl	3d0 <sark_msg_get>
 764:	1e04      	subs	r4, r0, #0
 766:	d061      	beq.n	82c <STACK_SIZE+0x2c>
 768:	1c29      	adds	r1, r5, #0
 76a:	1c20      	adds	r0, r4, #0
 76c:	f7ff ed5e 	blx	22c <sark_msg_cpy>
 770:	1c28      	adds	r0, r5, #0
 772:	f7ff fe6f 	bl	454 <sark_shmsg_free>
 776:	4b43      	ldr	r3, [pc, #268]	; (884 <STACK_SIZE+0x84>)
 778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 77a:	3201      	adds	r2, #1
 77c:	629a      	str	r2, [r3, #40]	; 0x28
 77e:	7aa5      	ldrb	r5, [r4, #10]
 780:	231f      	movs	r3, #31
 782:	1c28      	adds	r0, r5, #0
 784:	4398      	bics	r0, r3
 786:	d130      	bne.n	7ea <sark_int+0xb6>
 788:	88a3      	ldrh	r3, [r4, #4]
 78a:	2b17      	cmp	r3, #23
 78c:	d801      	bhi.n	792 <sark_int+0x5e>
 78e:	2381      	movs	r3, #129	; 0x81
 790:	e01b      	b.n	7ca <sark_int+0x96>
 792:	8a23      	ldrh	r3, [r4, #16]
 794:	2280      	movs	r2, #128	; 0x80
 796:	8222      	strh	r2, [r4, #16]
 798:	2b00      	cmp	r3, #0
 79a:	d103      	bne.n	7a4 <sark_int+0x70>
 79c:	1c20      	adds	r0, r4, #0
 79e:	f7ff ff39 	bl	614 <sark_cmd_ver>
 7a2:	e013      	b.n	7cc <sark_int+0x98>
 7a4:	2b02      	cmp	r3, #2
 7a6:	d103      	bne.n	7b0 <sark_int+0x7c>
 7a8:	1c20      	adds	r0, r4, #0
 7aa:	f7ff ff53 	bl	654 <sark_cmd_read>
 7ae:	e00d      	b.n	7cc <sark_int+0x98>
 7b0:	2b03      	cmp	r3, #3
 7b2:	d103      	bne.n	7bc <sark_int+0x88>
 7b4:	1c20      	adds	r0, r4, #0
 7b6:	f7ff ff80 	bl	6ba <sark_cmd_write>
 7ba:	e007      	b.n	7cc <sark_int+0x98>
 7bc:	2b05      	cmp	r3, #5
 7be:	d103      	bne.n	7c8 <sark_int+0x94>
 7c0:	1c20      	adds	r0, r4, #0
 7c2:	f7ff ffaf 	bl	724 <sark_cmd_fill>
 7c6:	e001      	b.n	7cc <sark_int+0x98>
 7c8:	2383      	movs	r3, #131	; 0x83
 7ca:	8223      	strh	r3, [r4, #16]
 7cc:	7aa2      	ldrb	r2, [r4, #10]
 7ce:	7ae1      	ldrb	r1, [r4, #11]
 7d0:	89a3      	ldrh	r3, [r4, #12]
 7d2:	300c      	adds	r0, #12
 7d4:	72e2      	strb	r2, [r4, #11]
 7d6:	89e2      	ldrh	r2, [r4, #14]
 7d8:	80a0      	strh	r0, [r4, #4]
 7da:	72a1      	strb	r1, [r4, #10]
 7dc:	81a2      	strh	r2, [r4, #12]
 7de:	81e3      	strh	r3, [r4, #14]
 7e0:	1c20      	adds	r0, r4, #0
 7e2:	210a      	movs	r1, #10
 7e4:	f7ff fec2 	bl	56c <sark_msg_send>
 7e8:	e01c      	b.n	824 <STACK_SIZE+0x24>
 7ea:	235a      	movs	r3, #90	; 0x5a
 7ec:	781b      	ldrb	r3, [r3, #0]
 7ee:	2b00      	cmp	r3, #0
 7f0:	d00f      	beq.n	812 <STACK_SIZE+0x12>
 7f2:	4b27      	ldr	r3, [pc, #156]	; (890 <STACK_SIZE+0x90>)
 7f4:	699b      	ldr	r3, [r3, #24]
 7f6:	2b00      	cmp	r3, #0
 7f8:	d014      	beq.n	824 <STACK_SIZE+0x24>
 7fa:	f7ff ecd4 	blx	1a4 <cpu_int_disable>
 7fe:	096a      	lsrs	r2, r5, #5
 800:	1c21      	adds	r1, r4, #0
 802:	1c06      	adds	r6, r0, #0
 804:	2003      	movs	r0, #3
 806:	f7ff fdbf 	bl	388 <schedule_sysmode>
 80a:	1c30      	adds	r0, r6, #0
 80c:	f7ff ecd2 	blx	1b4 <cpu_int_restore>
 810:	e036      	b.n	880 <STACK_SIZE+0x80>
 812:	4b20      	ldr	r3, [pc, #128]	; (894 <STACK_SIZE+0x94>)
 814:	681a      	ldr	r2, [r3, #0]
 816:	2380      	movs	r3, #128	; 0x80
 818:	055b      	lsls	r3, r3, #21
 81a:	421a      	tst	r2, r3
 81c:	d002      	beq.n	824 <STACK_SIZE+0x24>
 81e:	4a1e      	ldr	r2, [pc, #120]	; (898 <STACK_SIZE+0x98>)
 820:	6294      	str	r4, [r2, #40]	; 0x28
 822:	e02b      	b.n	87c <STACK_SIZE+0x7c>
 824:	1c20      	adds	r0, r4, #0
 826:	f7ff fdeb 	bl	400 <sark_msg_free>
 82a:	e029      	b.n	880 <STACK_SIZE+0x80>
 82c:	1c28      	adds	r0, r5, #0
 82e:	f7ff fe11 	bl	454 <sark_shmsg_free>
 832:	e025      	b.n	880 <STACK_SIZE+0x80>
 834:	2b02      	cmp	r3, #2
 836:	d108      	bne.n	84a <STACK_SIZE+0x4a>
 838:	f7ff ecb4 	blx	1a4 <cpu_int_disable>
 83c:	69e3      	ldr	r3, [r4, #28]
 83e:	1c28      	adds	r0, r5, #0
 840:	332f      	adds	r3, #47	; 0x2f
 842:	7819      	ldrb	r1, [r3, #0]
 844:	f7ff fd58 	bl	2f8 <sark_aplx>
 848:	e01a      	b.n	880 <STACK_SIZE+0x80>
 84a:	2b05      	cmp	r3, #5
 84c:	d101      	bne.n	852 <STACK_SIZE+0x52>
 84e:	2001      	movs	r0, #1
 850:	e001      	b.n	856 <STACK_SIZE+0x56>
 852:	2b06      	cmp	r3, #6
 854:	d102      	bne.n	85c <STACK_SIZE+0x5c>
 856:	f000 f823 	bl	8a0 <event_pause>
 85a:	e011      	b.n	880 <STACK_SIZE+0x80>
 85c:	2b04      	cmp	r3, #4
 85e:	d103      	bne.n	868 <STACK_SIZE+0x68>
 860:	20ff      	movs	r0, #255	; 0xff
 862:	f000 f837 	bl	8d4 <event_stop>
 866:	e00b      	b.n	880 <STACK_SIZE+0x80>
 868:	2b07      	cmp	r3, #7
 86a:	d109      	bne.n	880 <STACK_SIZE+0x80>
 86c:	4b09      	ldr	r3, [pc, #36]	; (894 <STACK_SIZE+0x94>)
 86e:	681a      	ldr	r2, [r3, #0]
 870:	2380      	movs	r3, #128	; 0x80
 872:	059b      	lsls	r3, r3, #22
 874:	421a      	tst	r2, r3
 876:	d003      	beq.n	880 <STACK_SIZE+0x80>
 878:	4a07      	ldr	r2, [pc, #28]	; (898 <STACK_SIZE+0x98>)
 87a:	62d5      	str	r5, [r2, #44]	; 0x2c
 87c:	4a07      	ldr	r2, [pc, #28]	; (89c <STACK_SIZE+0x9c>)
 87e:	6013      	str	r3, [r2, #0]
 880:	bd70      	pop	{r4, r5, r6, pc}
 882:	46c0      	nop			; (mov r8, r8)
 884:	00400038 	.word	0x00400038
 888:	5ec00000 	.word	0x5ec00000
 88c:	e200000c 	.word	0xe200000c
 890:	00400000 	.word	0x00400000
 894:	2f000010 	.word	0x2f000010
 898:	00400070 	.word	0x00400070
 89c:	2f000018 	.word	0x2f000018

000008a0 <event_pause>:
 8a0:	b508      	push	{r3, lr}
 8a2:	4a0a      	ldr	r2, [pc, #40]	; (8cc <event_pause+0x2c>)
 8a4:	4b0a      	ldr	r3, [pc, #40]	; (8d0 <event_pause+0x30>)
 8a6:	2800      	cmp	r0, #0
 8a8:	d005      	beq.n	8b6 <event_pause+0x16>
 8aa:	69d2      	ldr	r2, [r2, #28]
 8ac:	2101      	movs	r1, #1
 8ae:	7619      	strb	r1, [r3, #24]
 8b0:	322e      	adds	r2, #46	; 0x2e
 8b2:	2109      	movs	r1, #9
 8b4:	e003      	b.n	8be <event_pause+0x1e>
 8b6:	69d2      	ldr	r2, [r2, #28]
 8b8:	2105      	movs	r1, #5
 8ba:	322e      	adds	r2, #46	; 0x2e
 8bc:	7618      	strb	r0, [r3, #24]
 8be:	7011      	strb	r1, [r2, #0]
 8c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8c2:	2a00      	cmp	r2, #0
 8c4:	d001      	beq.n	8ca <event_pause+0x2a>
 8c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8c8:	4790      	blx	r2
 8ca:	bd08      	pop	{r3, pc}
 8cc:	00400038 	.word	0x00400038
 8d0:	00400070 	.word	0x00400070

000008d4 <event_stop>:
 8d4:	4b03      	ldr	r3, [pc, #12]	; (8e4 <event_stop+0x10>)
 8d6:	2202      	movs	r2, #2
 8d8:	761a      	strb	r2, [r3, #24]
 8da:	4a03      	ldr	r2, [pc, #12]	; (8e8 <event_stop+0x14>)
 8dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8de:	6011      	str	r1, [r2, #0]
 8e0:	6398      	str	r0, [r3, #56]	; 0x38
 8e2:	4770      	bx	lr
 8e4:	00400070 	.word	0x00400070
 8e8:	2f000014 	.word	0x2f000014

000008ec <event_alloc>:
 8ec:	b570      	push	{r4, r5, r6, lr}
 8ee:	2118      	movs	r1, #24
 8f0:	1c06      	adds	r6, r0, #0
 8f2:	f000 f8bf 	bl	a74 <sark_alloc>
 8f6:	4d0b      	ldr	r5, [pc, #44]	; (924 <event_alloc+0x38>)
 8f8:	1e04      	subs	r4, r0, #0
 8fa:	d00d      	beq.n	918 <event_alloc+0x2c>
 8fc:	1c31      	adds	r1, r6, #0
 8fe:	2218      	movs	r2, #24
 900:	f7ff fd56 	bl	3b0 <sark_block_init>
 904:	1c06      	adds	r6, r0, #0
 906:	f7ff ec4e 	blx	1a4 <cpu_int_disable>
 90a:	682a      	ldr	r2, [r5, #0]
 90c:	6032      	str	r2, [r6, #0]
 90e:	602c      	str	r4, [r5, #0]
 910:	f7ff ec50 	blx	1b4 <cpu_int_restore>
 914:	2001      	movs	r0, #1
 916:	e003      	b.n	920 <event_alloc+0x34>
 918:	696a      	ldr	r2, [r5, #20]
 91a:	2308      	movs	r3, #8
 91c:	4313      	orrs	r3, r2
 91e:	616b      	str	r3, [r5, #20]
 920:	bd70      	pop	{r4, r5, r6, pc}
 922:	46c0      	nop			; (mov r8, r8)
 924:	00400070 	.word	0x00400070

00000928 <sark_vic_init>:
 928:	4b0b      	ldr	r3, [pc, #44]	; (958 <sark_vic_init+0x30>)
 92a:	2201      	movs	r2, #1
 92c:	4252      	negs	r2, r2
 92e:	b510      	push	{r4, lr}
 930:	601a      	str	r2, [r3, #0]
 932:	4b0a      	ldr	r3, [pc, #40]	; (95c <sark_vic_init+0x34>)
 934:	2200      	movs	r2, #0
 936:	601a      	str	r2, [r3, #0]
 938:	4b09      	ldr	r3, [pc, #36]	; (960 <sark_vic_init+0x38>)
 93a:	4c0a      	ldr	r4, [pc, #40]	; (964 <sark_vic_init+0x3c>)
 93c:	601a      	str	r2, [r3, #0]
 93e:	490a      	ldr	r1, [pc, #40]	; (968 <sark_vic_init+0x40>)
 940:	4b0a      	ldr	r3, [pc, #40]	; (96c <sark_vic_init+0x44>)
 942:	1e58      	subs	r0, r3, #1
 944:	601a      	str	r2, [r3, #0]
 946:	38ff      	subs	r0, #255	; 0xff
 948:	3304      	adds	r3, #4
 94a:	6004      	str	r4, [r0, #0]
 94c:	428b      	cmp	r3, r1
 94e:	d1f8      	bne.n	942 <sark_vic_init+0x1a>
 950:	4b07      	ldr	r3, [pc, #28]	; (970 <sark_vic_init+0x48>)
 952:	4a08      	ldr	r2, [pc, #32]	; (974 <sark_vic_init+0x4c>)
 954:	601a      	str	r2, [r3, #0]
 956:	bd10      	pop	{r4, pc}
 958:	2f000014 	.word	0x2f000014
 95c:	2f00000c 	.word	0x2f00000c
 960:	2f000030 	.word	0x2f000030
 964:	00000104 	.word	0x00000104
 968:	2f000240 	.word	0x2f000240
 96c:	2f000200 	.word	0x2f000200
 970:	2f000034 	.word	0x2f000034
 974:	000002f0 	.word	0x000002f0

00000978 <sark_vic_set>:
 978:	b530      	push	{r4, r5, lr}
 97a:	4d09      	ldr	r5, [pc, #36]	; (9a0 <sark_vic_set+0x28>)
 97c:	0084      	lsls	r4, r0, #2
 97e:	1964      	adds	r4, r4, r5
 980:	6023      	str	r3, [r4, #0]
 982:	4b08      	ldr	r3, [pc, #32]	; (9a4 <sark_vic_set+0x2c>)
 984:	0080      	lsls	r0, r0, #2
 986:	18c0      	adds	r0, r0, r3
 988:	2320      	movs	r3, #32
 98a:	430b      	orrs	r3, r1
 98c:	6003      	str	r3, [r0, #0]
 98e:	2a00      	cmp	r2, #0
 990:	d004      	beq.n	99c <sark_vic_set+0x24>
 992:	2301      	movs	r3, #1
 994:	408b      	lsls	r3, r1
 996:	1c19      	adds	r1, r3, #0
 998:	4b03      	ldr	r3, [pc, #12]	; (9a8 <sark_vic_set+0x30>)
 99a:	6019      	str	r1, [r3, #0]
 99c:	bd30      	pop	{r4, r5, pc}
 99e:	46c0      	nop			; (mov r8, r8)
 9a0:	2f000100 	.word	0x2f000100
 9a4:	2f000200 	.word	0x2f000200
 9a8:	2f000010 	.word	0x2f000010

000009ac <sark_xalloc>:
 9ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 9ae:	1c07      	adds	r7, r0, #0
 9b0:	1c15      	adds	r5, r2, #0
 9b2:	2aff      	cmp	r2, #255	; 0xff
 9b4:	d858      	bhi.n	a68 <sark_xalloc+0xbc>
 9b6:	2900      	cmp	r1, #0
 9b8:	d100      	bne.n	9bc <sark_xalloc+0x10>
 9ba:	e055      	b.n	a68 <sark_xalloc+0xbc>
 9bc:	0a1e      	lsrs	r6, r3, #8
 9be:	0798      	lsls	r0, r3, #30
 9c0:	d401      	bmi.n	9c6 <sark_xalloc+0x1a>
 9c2:	2259      	movs	r2, #89	; 0x59
 9c4:	7816      	ldrb	r6, [r2, #0]
 9c6:	0236      	lsls	r6, r6, #8
 9c8:	1976      	adds	r6, r6, r5
 9ca:	2d00      	cmp	r5, #0
 9cc:	d005      	beq.n	9da <sark_xalloc+0x2e>
 9ce:	4a27      	ldr	r2, [pc, #156]	; (a6c <sark_xalloc+0xc0>)
 9d0:	00b0      	lsls	r0, r6, #2
 9d2:	6812      	ldr	r2, [r2, #0]
 9d4:	5882      	ldr	r2, [r0, r2]
 9d6:	2a00      	cmp	r2, #0
 9d8:	d146      	bne.n	a68 <sark_xalloc+0xbc>
 9da:	2203      	movs	r2, #3
 9dc:	3103      	adds	r1, #3
 9de:	4391      	bics	r1, r2
 9e0:	2201      	movs	r2, #1
 9e2:	3108      	adds	r1, #8
 9e4:	4013      	ands	r3, r2
 9e6:	9101      	str	r1, [sp, #4]
 9e8:	9300      	str	r3, [sp, #0]
 9ea:	d003      	beq.n	9f4 <sark_xalloc+0x48>
 9ec:	2006      	movs	r0, #6
 9ee:	f7ff ebe6 	blx	1bc <sark_lock_get>
 9f2:	4684      	mov	ip, r0
 9f4:	683c      	ldr	r4, [r7, #0]
 9f6:	2200      	movs	r2, #0
 9f8:	e02d      	b.n	a56 <sark_xalloc+0xaa>
 9fa:	9801      	ldr	r0, [sp, #4]
 9fc:	6821      	ldr	r1, [r4, #0]
 9fe:	1823      	adds	r3, r4, r0
 a00:	42a3      	cmp	r3, r4
 a02:	d92a      	bls.n	a5a <sark_xalloc+0xae>
 a04:	428b      	cmp	r3, r1
 a06:	d902      	bls.n	a0e <sark_xalloc+0x62>
 a08:	1c22      	adds	r2, r4, #0
 a0a:	6864      	ldr	r4, [r4, #4]
 a0c:	e023      	b.n	a56 <sark_xalloc+0xaa>
 a0e:	1c18      	adds	r0, r3, #0
 a10:	3008      	adds	r0, #8
 a12:	4281      	cmp	r1, r0
 a14:	d904      	bls.n	a20 <sark_xalloc+0x74>
 a16:	6019      	str	r1, [r3, #0]
 a18:	6861      	ldr	r1, [r4, #4]
 a1a:	6059      	str	r1, [r3, #4]
 a1c:	6023      	str	r3, [r4, #0]
 a1e:	6063      	str	r3, [r4, #4]
 a20:	6863      	ldr	r3, [r4, #4]
 a22:	2a00      	cmp	r2, #0
 a24:	d001      	beq.n	a2a <sark_xalloc+0x7e>
 a26:	6053      	str	r3, [r2, #4]
 a28:	e000      	b.n	a2c <sark_xalloc+0x80>
 a2a:	603b      	str	r3, [r7, #0]
 a2c:	9a00      	ldr	r2, [sp, #0]
 a2e:	2a00      	cmp	r2, #0
 a30:	d003      	beq.n	a3a <sark_xalloc+0x8e>
 a32:	4660      	mov	r0, ip
 a34:	2106      	movs	r1, #6
 a36:	f7ff ebd4 	blx	1e0 <sark_lock_free>
 a3a:	480d      	ldr	r0, [pc, #52]	; (a70 <sark_xalloc+0xc4>)
 a3c:	1833      	adds	r3, r6, r0
 a3e:	6063      	str	r3, [r4, #4]
 a40:	2d00      	cmp	r5, #0
 a42:	d005      	beq.n	a50 <sark_xalloc+0xa4>
 a44:	4b09      	ldr	r3, [pc, #36]	; (a6c <sark_xalloc+0xc0>)
 a46:	1c22      	adds	r2, r4, #0
 a48:	681b      	ldr	r3, [r3, #0]
 a4a:	00b6      	lsls	r6, r6, #2
 a4c:	3208      	adds	r2, #8
 a4e:	50f2      	str	r2, [r6, r3]
 a50:	1c20      	adds	r0, r4, #0
 a52:	3008      	adds	r0, #8
 a54:	e009      	b.n	a6a <sark_xalloc+0xbe>
 a56:	2c00      	cmp	r4, #0
 a58:	d1cf      	bne.n	9fa <sark_xalloc+0x4e>
 a5a:	9900      	ldr	r1, [sp, #0]
 a5c:	2900      	cmp	r1, #0
 a5e:	d003      	beq.n	a68 <sark_xalloc+0xbc>
 a60:	4660      	mov	r0, ip
 a62:	2106      	movs	r1, #6
 a64:	f7ff ebbc 	blx	1e0 <sark_lock_free>
 a68:	2000      	movs	r0, #0
 a6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 a6c:	e5007fdc 	.word	0xe5007fdc
 a70:	ffff0000 	.word	0xffff0000

00000a74 <sark_alloc>:
 a74:	4a04      	ldr	r2, [pc, #16]	; (a88 <sark_alloc+0x14>)
 a76:	b508      	push	{r3, lr}
 a78:	1c03      	adds	r3, r0, #0
 a7a:	6990      	ldr	r0, [r2, #24]
 a7c:	2200      	movs	r2, #0
 a7e:	4359      	muls	r1, r3
 a80:	1c13      	adds	r3, r2, #0
 a82:	f7ff ff93 	bl	9ac <sark_xalloc>
 a86:	bd08      	pop	{r3, pc}
 a88:	00400038 	.word	0x00400038

00000a8c <sark_heap_init>:
 a8c:	1c03      	adds	r3, r0, #0
 a8e:	330c      	adds	r3, #12
 a90:	3908      	subs	r1, #8
 a92:	6043      	str	r3, [r0, #4]
 a94:	6003      	str	r3, [r0, #0]
 a96:	2300      	movs	r3, #0
 a98:	6081      	str	r1, [r0, #8]
 a9a:	60c1      	str	r1, [r0, #12]
 a9c:	6103      	str	r3, [r0, #16]
 a9e:	600b      	str	r3, [r1, #0]
 aa0:	604b      	str	r3, [r1, #4]
 aa2:	4770      	bx	lr

00000aa4 <io_buf_init>:
 aa4:	b538      	push	{r3, r4, r5, lr}
 aa6:	4d0c      	ldr	r5, [pc, #48]	; (ad8 <io_buf_init+0x34>)
 aa8:	4b0c      	ldr	r3, [pc, #48]	; (adc <io_buf_init+0x38>)
 aaa:	6d29      	ldr	r1, [r5, #80]	; 0x50
 aac:	6818      	ldr	r0, [r3, #0]
 aae:	3110      	adds	r1, #16
 ab0:	2200      	movs	r2, #0
 ab2:	2301      	movs	r3, #1
 ab4:	f7ff ff7a 	bl	9ac <sark_xalloc>
 ab8:	1e04      	subs	r4, r0, #0
 aba:	d102      	bne.n	ac2 <io_buf_init+0x1e>
 abc:	200e      	movs	r0, #14
 abe:	f7ff fb33 	bl	128 <rt_error>
 ac2:	69eb      	ldr	r3, [r5, #28]
 ac4:	6063      	str	r3, [r4, #4]
 ac6:	4a06      	ldr	r2, [pc, #24]	; (ae0 <io_buf_init+0x3c>)
 ac8:	8b2b      	ldrh	r3, [r5, #24]
 aca:	60a3      	str	r3, [r4, #8]
 acc:	2300      	movs	r3, #0
 ace:	1c20      	adds	r0, r4, #0
 ad0:	6023      	str	r3, [r4, #0]
 ad2:	6013      	str	r3, [r2, #0]
 ad4:	60e3      	str	r3, [r4, #12]
 ad6:	bd38      	pop	{r3, r4, r5, pc}
 ad8:	e5007f00 	.word	0xe5007f00
 adc:	e5007fd0 	.word	0xe5007fd0
 ae0:	00400030 	.word	0x00400030

00000ae4 <io_put_char>:
 ae4:	b538      	push	{r3, r4, r5, lr}
 ae6:	2803      	cmp	r0, #3
 ae8:	d907      	bls.n	afa <io_put_char+0x16>
 aea:	4a1d      	ldr	r2, [pc, #116]	; (b60 <io_put_char+0x7c>)
 aec:	6813      	ldr	r3, [r2, #0]
 aee:	54c1      	strb	r1, [r0, r3]
 af0:	3301      	adds	r3, #1
 af2:	6013      	str	r3, [r2, #0]
 af4:	2200      	movs	r2, #0
 af6:	54c2      	strb	r2, [r0, r3]
 af8:	e031      	b.n	b5e <io_put_char+0x7a>
 afa:	2800      	cmp	r0, #0
 afc:	d116      	bne.n	b2c <io_put_char+0x48>
 afe:	4a19      	ldr	r2, [pc, #100]	; (b64 <io_put_char+0x80>)
 b00:	6810      	ldr	r0, [r2, #0]
 b02:	8883      	ldrh	r3, [r0, #4]
 b04:	18c4      	adds	r4, r0, r3
 b06:	3301      	adds	r3, #1
 b08:	041b      	lsls	r3, r3, #16
 b0a:	0c1b      	lsrs	r3, r3, #16
 b0c:	7221      	strb	r1, [r4, #8]
 b0e:	8083      	strh	r3, [r0, #4]
 b10:	1c14      	adds	r4, r2, #0
 b12:	290a      	cmp	r1, #10
 b14:	d003      	beq.n	b1e <io_put_char+0x3a>
 b16:	2286      	movs	r2, #134	; 0x86
 b18:	0052      	lsls	r2, r2, #1
 b1a:	4293      	cmp	r3, r2
 b1c:	d11f      	bne.n	b5e <io_put_char+0x7a>
 b1e:	210a      	movs	r1, #10
 b20:	f7ff fd24 	bl	56c <sark_msg_send>
 b24:	6823      	ldr	r3, [r4, #0]
 b26:	220c      	movs	r2, #12
 b28:	809a      	strh	r2, [r3, #4]
 b2a:	e018      	b.n	b5e <io_put_char+0x7a>
 b2c:	2802      	cmp	r0, #2
 b2e:	d116      	bne.n	b5e <io_put_char+0x7a>
 b30:	4a0d      	ldr	r2, [pc, #52]	; (b68 <io_put_char+0x84>)
 b32:	4d0e      	ldr	r5, [pc, #56]	; (b6c <io_put_char+0x88>)
 b34:	6813      	ldr	r3, [r2, #0]
 b36:	682c      	ldr	r4, [r5, #0]
 b38:	18e0      	adds	r0, r4, r3
 b3a:	3301      	adds	r3, #1
 b3c:	6013      	str	r3, [r2, #0]
 b3e:	4a0c      	ldr	r2, [pc, #48]	; (b70 <io_put_char+0x8c>)
 b40:	7401      	strb	r1, [r0, #16]
 b42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 b44:	4293      	cmp	r3, r2
 b46:	d107      	bne.n	b58 <io_put_char+0x74>
 b48:	60e3      	str	r3, [r4, #12]
 b4a:	f7ff ffab 	bl	aa4 <io_buf_init>
 b4e:	682b      	ldr	r3, [r5, #0]
 b50:	6020      	str	r0, [r4, #0]
 b52:	681b      	ldr	r3, [r3, #0]
 b54:	602b      	str	r3, [r5, #0]
 b56:	e002      	b.n	b5e <io_put_char+0x7a>
 b58:	290a      	cmp	r1, #10
 b5a:	d100      	bne.n	b5e <io_put_char+0x7a>
 b5c:	60e3      	str	r3, [r4, #12]
 b5e:	bd38      	pop	{r3, r4, r5, pc}
 b60:	00400034 	.word	0x00400034
 b64:	00400028 	.word	0x00400028
 b68:	00400030 	.word	0x00400030
 b6c:	0040002c 	.word	0x0040002c
 b70:	e5007f00 	.word	0xe5007f00

00000b74 <io_printf>:
 b74:	b40e      	push	{r1, r2, r3}
 b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 b78:	1c04      	adds	r4, r0, #0
 b7a:	b08a      	sub	sp, #40	; 0x28
 b7c:	2803      	cmp	r0, #3
 b7e:	d904      	bls.n	b8a <io_printf+0x16>
 b80:	4a9b      	ldr	r2, [pc, #620]	; (df0 <ETH_RX_SIZE+0x1f0>)
 b82:	2300      	movs	r3, #0
 b84:	7003      	strb	r3, [r0, #0]
 b86:	6013      	str	r3, [r2, #0]
 b88:	e030      	b.n	bec <io_printf+0x78>
 b8a:	2800      	cmp	r0, #0
 b8c:	d122      	bne.n	bd4 <io_printf+0x60>
 b8e:	4b99      	ldr	r3, [pc, #612]	; (df4 <ETH_RX_SIZE+0x1f4>)
 b90:	681b      	ldr	r3, [r3, #0]
 b92:	2b00      	cmp	r3, #0
 b94:	d12a      	bne.n	bec <io_printf+0x78>
 b96:	2001      	movs	r0, #1
 b98:	2192      	movs	r1, #146	; 0x92
 b9a:	4081      	lsls	r1, r0
 b9c:	f7ff ff6a 	bl	a74 <sark_alloc>
 ba0:	1e05      	subs	r5, r0, #0
 ba2:	d102      	bne.n	baa <io_printf+0x36>
 ba4:	200e      	movs	r0, #14
 ba6:	f7ff fabf 	bl	128 <rt_error>
 baa:	2307      	movs	r3, #7
 bac:	722b      	strb	r3, [r5, #8]
 bae:	2300      	movs	r3, #0
 bb0:	726b      	strb	r3, [r5, #9]
 bb2:	23ff      	movs	r3, #255	; 0xff
 bb4:	72ab      	strb	r3, [r5, #10]
 bb6:	4b90      	ldr	r3, [pc, #576]	; (df8 <ETH_RX_SIZE+0x1f8>)
 bb8:	889a      	ldrh	r2, [r3, #4]
 bba:	81aa      	strh	r2, [r5, #12]
 bbc:	4a8f      	ldr	r2, [pc, #572]	; (dfc <ETH_RX_SIZE+0x1fc>)
 bbe:	6812      	ldr	r2, [r2, #0]
 bc0:	72ea      	strb	r2, [r5, #11]
 bc2:	881b      	ldrh	r3, [r3, #0]
 bc4:	81eb      	strh	r3, [r5, #14]
 bc6:	2340      	movs	r3, #64	; 0x40
 bc8:	822b      	strh	r3, [r5, #16]
 bca:	230c      	movs	r3, #12
 bcc:	80ab      	strh	r3, [r5, #4]
 bce:	4b89      	ldr	r3, [pc, #548]	; (df4 <ETH_RX_SIZE+0x1f4>)
 bd0:	601d      	str	r5, [r3, #0]
 bd2:	e00b      	b.n	bec <io_printf+0x78>
 bd4:	2802      	cmp	r0, #2
 bd6:	d109      	bne.n	bec <io_printf+0x78>
 bd8:	4d89      	ldr	r5, [pc, #548]	; (e00 <ETH_RX_SIZE+0x200>)
 bda:	682b      	ldr	r3, [r5, #0]
 bdc:	2b00      	cmp	r3, #0
 bde:	d105      	bne.n	bec <io_printf+0x78>
 be0:	4b86      	ldr	r3, [pc, #536]	; (dfc <ETH_RX_SIZE+0x1fc>)
 be2:	69de      	ldr	r6, [r3, #28]
 be4:	f7ff ff5e 	bl	aa4 <io_buf_init>
 be8:	65b0      	str	r0, [r6, #88]	; 0x58
 bea:	6028      	str	r0, [r5, #0]
 bec:	ab10      	add	r3, sp, #64	; 0x40
 bee:	9303      	str	r3, [sp, #12]
 bf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 bf2:	7819      	ldrb	r1, [r3, #0]
 bf4:	2900      	cmp	r1, #0
 bf6:	d100      	bne.n	bfa <io_printf+0x86>
 bf8:	e0f4      	b.n	de4 <ETH_RX_SIZE+0x1e4>
 bfa:	2925      	cmp	r1, #37	; 0x25
 bfc:	d002      	beq.n	c04 <ETH_RX_SIZE+0x4>
 bfe:	3301      	adds	r3, #1
 c00:	930f      	str	r3, [sp, #60]	; 0x3c
 c02:	e033      	b.n	c6c <ETH_RX_SIZE+0x6c>
 c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c06:	7859      	ldrb	r1, [r3, #1]
 c08:	3302      	adds	r3, #2
 c0a:	930f      	str	r3, [sp, #60]	; 0x3c
 c0c:	2900      	cmp	r1, #0
 c0e:	d100      	bne.n	c12 <ETH_RX_SIZE+0x12>
 c10:	e0e8      	b.n	de4 <ETH_RX_SIZE+0x1e4>
 c12:	2930      	cmp	r1, #48	; 0x30
 c14:	d002      	beq.n	c1c <ETH_RX_SIZE+0x1c>
 c16:	2320      	movs	r3, #32
 c18:	9301      	str	r3, [sp, #4]
 c1a:	e000      	b.n	c1e <ETH_RX_SIZE+0x1e>
 c1c:	9101      	str	r1, [sp, #4]
 c1e:	2600      	movs	r6, #0
 c20:	220a      	movs	r2, #10
 c22:	e009      	b.n	c38 <ETH_RX_SIZE+0x38>
 c24:	4356      	muls	r6, r2
 c26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c28:	1876      	adds	r6, r6, r1
 c2a:	7819      	ldrb	r1, [r3, #0]
 c2c:	3301      	adds	r3, #1
 c2e:	3e30      	subs	r6, #48	; 0x30
 c30:	930f      	str	r3, [sp, #60]	; 0x3c
 c32:	2900      	cmp	r1, #0
 c34:	d100      	bne.n	c38 <ETH_RX_SIZE+0x38>
 c36:	e0d5      	b.n	de4 <ETH_RX_SIZE+0x1e4>
 c38:	1c0b      	adds	r3, r1, #0
 c3a:	3b30      	subs	r3, #48	; 0x30
 c3c:	2b09      	cmp	r3, #9
 c3e:	d9f1      	bls.n	c24 <ETH_RX_SIZE+0x24>
 c40:	1c37      	adds	r7, r6, #0
 c42:	2973      	cmp	r1, #115	; 0x73
 c44:	d016      	beq.n	c74 <ETH_RX_SIZE+0x74>
 c46:	d804      	bhi.n	c52 <ETH_RX_SIZE+0x52>
 c48:	2963      	cmp	r1, #99	; 0x63
 c4a:	d00b      	beq.n	c64 <ETH_RX_SIZE+0x64>
 c4c:	2964      	cmp	r1, #100	; 0x64
 c4e:	d10d      	bne.n	c6c <ETH_RX_SIZE+0x6c>
 c50:	e02b      	b.n	caa <ETH_RX_SIZE+0xaa>
 c52:	2978      	cmp	r1, #120	; 0x78
 c54:	d100      	bne.n	c58 <ETH_RX_SIZE+0x58>
 c56:	e084      	b.n	d62 <ETH_RX_SIZE+0x162>
 c58:	297a      	cmp	r1, #122	; 0x7a
 c5a:	d100      	bne.n	c5e <ETH_RX_SIZE+0x5e>
 c5c:	e0ab      	b.n	db6 <ETH_RX_SIZE+0x1b6>
 c5e:	2975      	cmp	r1, #117	; 0x75
 c60:	d104      	bne.n	c6c <ETH_RX_SIZE+0x6c>
 c62:	e054      	b.n	d0e <ETH_RX_SIZE+0x10e>
 c64:	9b03      	ldr	r3, [sp, #12]
 c66:	6819      	ldr	r1, [r3, #0]
 c68:	1d1a      	adds	r2, r3, #4
 c6a:	9203      	str	r2, [sp, #12]
 c6c:	1c20      	adds	r0, r4, #0
 c6e:	f7ff ff39 	bl	ae4 <io_put_char>
 c72:	e7bd      	b.n	bf0 <io_printf+0x7c>
 c74:	9b03      	ldr	r3, [sp, #12]
 c76:	681d      	ldr	r5, [r3, #0]
 c78:	1d1a      	adds	r2, r3, #4
 c7a:	1c2b      	adds	r3, r5, #0
 c7c:	9203      	str	r2, [sp, #12]
 c7e:	781a      	ldrb	r2, [r3, #0]
 c80:	1b5e      	subs	r6, r3, r5
 c82:	3301      	adds	r3, #1
 c84:	2a00      	cmp	r2, #0
 c86:	d1fa      	bne.n	c7e <ETH_RX_SIZE+0x7e>
 c88:	e004      	b.n	c94 <ETH_RX_SIZE+0x94>
 c8a:	1c20      	adds	r0, r4, #0
 c8c:	2120      	movs	r1, #32
 c8e:	f7ff ff29 	bl	ae4 <io_put_char>
 c92:	3f01      	subs	r7, #1
 c94:	42b7      	cmp	r7, r6
 c96:	dcf8      	bgt.n	c8a <ETH_RX_SIZE+0x8a>
 c98:	e003      	b.n	ca2 <ETH_RX_SIZE+0xa2>
 c9a:	1c20      	adds	r0, r4, #0
 c9c:	3501      	adds	r5, #1
 c9e:	f7ff ff21 	bl	ae4 <io_put_char>
 ca2:	7829      	ldrb	r1, [r5, #0]
 ca4:	2900      	cmp	r1, #0
 ca6:	d1f8      	bne.n	c9a <ETH_RX_SIZE+0x9a>
 ca8:	e7a2      	b.n	bf0 <io_printf+0x7c>
 caa:	9b03      	ldr	r3, [sp, #12]
 cac:	2700      	movs	r7, #0
 cae:	6819      	ldr	r1, [r3, #0]
 cb0:	1d1a      	adds	r2, r3, #4
 cb2:	9203      	str	r2, [sp, #12]
 cb4:	42b9      	cmp	r1, r7
 cb6:	da01      	bge.n	cbc <ETH_RX_SIZE+0xbc>
 cb8:	4249      	negs	r1, r1
 cba:	272d      	movs	r7, #45	; 0x2d
 cbc:	2500      	movs	r5, #0
 cbe:	a804      	add	r0, sp, #16
 cc0:	f7ff eae6 	blx	290 <sark_div10>
 cc4:	9a05      	ldr	r2, [sp, #20]
 cc6:	9904      	ldr	r1, [sp, #16]
 cc8:	ab06      	add	r3, sp, #24
 cca:	3230      	adds	r2, #48	; 0x30
 ccc:	54ea      	strb	r2, [r5, r3]
 cce:	3501      	adds	r5, #1
 cd0:	2900      	cmp	r1, #0
 cd2:	d1f4      	bne.n	cbe <ETH_RX_SIZE+0xbe>
 cd4:	e001      	b.n	cda <ETH_RX_SIZE+0xda>
 cd6:	2d00      	cmp	r5, #0
 cd8:	d003      	beq.n	ce2 <ETH_RX_SIZE+0xe2>
 cda:	3d01      	subs	r5, #1
 cdc:	5cea      	ldrb	r2, [r5, r3]
 cde:	2a30      	cmp	r2, #48	; 0x30
 ce0:	d0f9      	beq.n	cd6 <ETH_RX_SIZE+0xd6>
 ce2:	2f00      	cmp	r7, #0
 ce4:	d007      	beq.n	cf6 <ETH_RX_SIZE+0xf6>
 ce6:	3501      	adds	r5, #1
 ce8:	555f      	strb	r7, [r3, r5]
 cea:	e004      	b.n	cf6 <ETH_RX_SIZE+0xf6>
 cec:	1c20      	adds	r0, r4, #0
 cee:	2120      	movs	r1, #32
 cf0:	f7ff fef8 	bl	ae4 <io_put_char>
 cf4:	3e01      	subs	r6, #1
 cf6:	1c6b      	adds	r3, r5, #1
 cf8:	429e      	cmp	r6, r3
 cfa:	d8f7      	bhi.n	cec <ETH_RX_SIZE+0xec>
 cfc:	ab06      	add	r3, sp, #24
 cfe:	5ce9      	ldrb	r1, [r5, r3]
 d00:	1c20      	adds	r0, r4, #0
 d02:	3d01      	subs	r5, #1
 d04:	f7ff feee 	bl	ae4 <io_put_char>
 d08:	1c6b      	adds	r3, r5, #1
 d0a:	d1f7      	bne.n	cfc <ETH_RX_SIZE+0xfc>
 d0c:	e770      	b.n	bf0 <io_printf+0x7c>
 d0e:	9b03      	ldr	r3, [sp, #12]
 d10:	2500      	movs	r5, #0
 d12:	6819      	ldr	r1, [r3, #0]
 d14:	1d1a      	adds	r2, r3, #4
 d16:	9203      	str	r2, [sp, #12]
 d18:	a804      	add	r0, sp, #16
 d1a:	f7ff eaba 	blx	290 <sark_div10>
 d1e:	9a05      	ldr	r2, [sp, #20]
 d20:	9904      	ldr	r1, [sp, #16]
 d22:	3230      	adds	r2, #48	; 0x30
 d24:	ab06      	add	r3, sp, #24
 d26:	54ea      	strb	r2, [r5, r3]
 d28:	3501      	adds	r5, #1
 d2a:	2900      	cmp	r1, #0
 d2c:	d1f4      	bne.n	d18 <ETH_RX_SIZE+0x118>
 d2e:	e001      	b.n	d34 <ETH_RX_SIZE+0x134>
 d30:	2d00      	cmp	r5, #0
 d32:	d00a      	beq.n	d4a <ETH_RX_SIZE+0x14a>
 d34:	3d01      	subs	r5, #1
 d36:	ab06      	add	r3, sp, #24
 d38:	5ceb      	ldrb	r3, [r5, r3]
 d3a:	2b30      	cmp	r3, #48	; 0x30
 d3c:	d105      	bne.n	d4a <ETH_RX_SIZE+0x14a>
 d3e:	e7f7      	b.n	d30 <ETH_RX_SIZE+0x130>
 d40:	1c20      	adds	r0, r4, #0
 d42:	9901      	ldr	r1, [sp, #4]
 d44:	f7ff fece 	bl	ae4 <io_put_char>
 d48:	3e01      	subs	r6, #1
 d4a:	1c6b      	adds	r3, r5, #1
 d4c:	429e      	cmp	r6, r3
 d4e:	d8f7      	bhi.n	d40 <ETH_RX_SIZE+0x140>
 d50:	ab06      	add	r3, sp, #24
 d52:	5ce9      	ldrb	r1, [r5, r3]
 d54:	1c20      	adds	r0, r4, #0
 d56:	3d01      	subs	r5, #1
 d58:	f7ff fec4 	bl	ae4 <io_put_char>
 d5c:	1c6b      	adds	r3, r5, #1
 d5e:	d1f7      	bne.n	d50 <ETH_RX_SIZE+0x150>
 d60:	e746      	b.n	bf0 <io_printf+0x7c>
 d62:	9b03      	ldr	r3, [sp, #12]
 d64:	4827      	ldr	r0, [pc, #156]	; (e04 <ETH_RX_SIZE+0x204>)
 d66:	1d1a      	adds	r2, r3, #4
 d68:	681b      	ldr	r3, [r3, #0]
 d6a:	2500      	movs	r5, #0
 d6c:	270f      	movs	r7, #15
 d6e:	9203      	str	r2, [sp, #12]
 d70:	1c1a      	adds	r2, r3, #0
 d72:	403a      	ands	r2, r7
 d74:	5c81      	ldrb	r1, [r0, r2]
 d76:	aa06      	add	r2, sp, #24
 d78:	54a9      	strb	r1, [r5, r2]
 d7a:	091b      	lsrs	r3, r3, #4
 d7c:	3501      	adds	r5, #1
 d7e:	2b00      	cmp	r3, #0
 d80:	d1f6      	bne.n	d70 <ETH_RX_SIZE+0x170>
 d82:	e001      	b.n	d88 <ETH_RX_SIZE+0x188>
 d84:	2d00      	cmp	r5, #0
 d86:	d00a      	beq.n	d9e <ETH_RX_SIZE+0x19e>
 d88:	3d01      	subs	r5, #1
 d8a:	ab06      	add	r3, sp, #24
 d8c:	5ceb      	ldrb	r3, [r5, r3]
 d8e:	2b30      	cmp	r3, #48	; 0x30
 d90:	d105      	bne.n	d9e <ETH_RX_SIZE+0x19e>
 d92:	e7f7      	b.n	d84 <ETH_RX_SIZE+0x184>
 d94:	1c20      	adds	r0, r4, #0
 d96:	9901      	ldr	r1, [sp, #4]
 d98:	f7ff fea4 	bl	ae4 <io_put_char>
 d9c:	3e01      	subs	r6, #1
 d9e:	1c6b      	adds	r3, r5, #1
 da0:	429e      	cmp	r6, r3
 da2:	d8f7      	bhi.n	d94 <ETH_RX_SIZE+0x194>
 da4:	ab06      	add	r3, sp, #24
 da6:	5ce9      	ldrb	r1, [r5, r3]
 da8:	1c20      	adds	r0, r4, #0
 daa:	3d01      	subs	r5, #1
 dac:	f7ff fe9a 	bl	ae4 <io_put_char>
 db0:	1c6b      	adds	r3, r5, #1
 db2:	d1f7      	bne.n	da4 <ETH_RX_SIZE+0x1a4>
 db4:	e71c      	b.n	bf0 <io_printf+0x7c>
 db6:	9b03      	ldr	r3, [sp, #12]
 db8:	1e75      	subs	r5, r6, #1
 dba:	1d1a      	adds	r2, r3, #4
 dbc:	681f      	ldr	r7, [r3, #0]
 dbe:	4b12      	ldr	r3, [pc, #72]	; (e08 <ETH_RX_SIZE+0x208>)
 dc0:	9203      	str	r2, [sp, #12]
 dc2:	18f6      	adds	r6, r6, r3
 dc4:	00b6      	lsls	r6, r6, #2
 dc6:	e00a      	b.n	dde <ETH_RX_SIZE+0x1de>
 dc8:	1c3a      	adds	r2, r7, #0
 dca:	40f2      	lsrs	r2, r6
 dcc:	230f      	movs	r3, #15
 dce:	4013      	ands	r3, r2
 dd0:	4a0c      	ldr	r2, [pc, #48]	; (e04 <ETH_RX_SIZE+0x204>)
 dd2:	1c20      	adds	r0, r4, #0
 dd4:	5cd1      	ldrb	r1, [r2, r3]
 dd6:	f7ff fe85 	bl	ae4 <io_put_char>
 dda:	3d01      	subs	r5, #1
 ddc:	3e04      	subs	r6, #4
 dde:	2d00      	cmp	r5, #0
 de0:	daf2      	bge.n	dc8 <ETH_RX_SIZE+0x1c8>
 de2:	e705      	b.n	bf0 <io_printf+0x7c>
 de4:	b00a      	add	sp, #40	; 0x28
 de6:	bcf0      	pop	{r4, r5, r6, r7}
 de8:	bc08      	pop	{r3}
 dea:	b003      	add	sp, #12
 dec:	4718      	bx	r3
 dee:	46c0      	nop			; (mov r8, r8)
 df0:	00400034 	.word	0x00400034
 df4:	00400028 	.word	0x00400028
 df8:	e5007f00 	.word	0xe5007f00
 dfc:	00400038 	.word	0x00400038
 e00:	0040002c 	.word	0x0040002c
 e04:	00000e47 	.word	0x00000e47
 e08:	3fffffff 	.word	0x3fffffff
 e0c:	2c752528 	.word	0x2c752528
 e10:	2c752520 	.word	0x2c752520
 e14:	29752520 	.word	0x29752520
 e18:	3270000a 	.word	0x3270000a
 e1c:	64615f70 	.word	0x64615f70
 e20:	203a7264 	.word	0x203a7264
 e24:	202c7525 	.word	0x202c7525
 e28:	000a7525 	.word	0x000a7525

00000e2c <build_name>:
 e2c:	7061796d 00000070                       myapp...

00000e34 <build_date>:
 e34:	525b43ac 4b524153 6970532f 6b614e4e     .C[RSARK/SpiNNak
 e44:	30007265                                         er.

00000e47 <hex>:
 e47:	33323130 37363534 62613938 66656463     0123456789abcdef
	...
